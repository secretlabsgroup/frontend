module.exports = {
	// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
	typeDefs:
		// Please don't change this file manually but run `prisma generate` to update it.
		// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

		/* GraphQL */ `
			type AggregateChat {
				count: Int!
			}

			type AggregateDirectMessage {
				count: Int!
			}

			type AggregateEvent {
				count: Int!
			}

			type AggregateGenre {
				count: Int!
			}

			type AggregateProfilePic {
				count: Int!
			}

			type AggregateUser {
				count: Int!
			}

			type BatchPayload {
				count: Long!
			}

			enum Category {
				MUSIC
				ARTS_THEATRE
				SPORTS
				MISCELLANEOUS
			}

			type Chat {
				id: ID!
				users(
					where: UserWhereInput
					orderBy: UserOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [User!]
				messages(
					where: DirectMessageWhereInput
					orderBy: DirectMessageOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [DirectMessage!]
			}

			type ChatConnection {
				pageInfo: PageInfo!
				edges: [ChatEdge]!
				aggregate: AggregateChat!
			}

			input ChatCreateInput {
				users: UserCreateManyWithoutChatsInput
				messages: DirectMessageCreateManyWithoutChatInput
			}

			input ChatCreateManyWithoutUsersInput {
				create: [ChatCreateWithoutUsersInput!]
				connect: [ChatWhereUniqueInput!]
			}

			input ChatCreateOneWithoutMessagesInput {
				create: ChatCreateWithoutMessagesInput
				connect: ChatWhereUniqueInput
			}

			input ChatCreateWithoutMessagesInput {
				users: UserCreateManyWithoutChatsInput
			}

			input ChatCreateWithoutUsersInput {
				messages: DirectMessageCreateManyWithoutChatInput
			}

			type ChatEdge {
				node: Chat!
				cursor: String!
			}

			enum ChatOrderByInput {
				id_ASC
				id_DESC
				createdAt_ASC
				createdAt_DESC
				updatedAt_ASC
				updatedAt_DESC
			}

			type ChatPreviousValues {
				id: ID!
			}

			input ChatScalarWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				AND: [ChatScalarWhereInput!]
				OR: [ChatScalarWhereInput!]
				NOT: [ChatScalarWhereInput!]
			}

			type ChatSubscriptionPayload {
				mutation: MutationType!
				node: Chat
				updatedFields: [String!]
				previousValues: ChatPreviousValues
			}

			input ChatSubscriptionWhereInput {
				mutation_in: [MutationType!]
				updatedFields_contains: String
				updatedFields_contains_every: [String!]
				updatedFields_contains_some: [String!]
				node: ChatWhereInput
				AND: [ChatSubscriptionWhereInput!]
				OR: [ChatSubscriptionWhereInput!]
				NOT: [ChatSubscriptionWhereInput!]
			}

			input ChatUpdateInput {
				users: UserUpdateManyWithoutChatsInput
				messages: DirectMessageUpdateManyWithoutChatInput
			}

			input ChatUpdateManyWithoutUsersInput {
				create: [ChatCreateWithoutUsersInput!]
				delete: [ChatWhereUniqueInput!]
				connect: [ChatWhereUniqueInput!]
				set: [ChatWhereUniqueInput!]
				disconnect: [ChatWhereUniqueInput!]
				update: [ChatUpdateWithWhereUniqueWithoutUsersInput!]
				upsert: [ChatUpsertWithWhereUniqueWithoutUsersInput!]
				deleteMany: [ChatScalarWhereInput!]
			}

			input ChatUpdateOneRequiredWithoutMessagesInput {
				create: ChatCreateWithoutMessagesInput
				update: ChatUpdateWithoutMessagesDataInput
				upsert: ChatUpsertWithoutMessagesInput
				connect: ChatWhereUniqueInput
			}

			input ChatUpdateWithoutMessagesDataInput {
				users: UserUpdateManyWithoutChatsInput
			}

			input ChatUpdateWithoutUsersDataInput {
				messages: DirectMessageUpdateManyWithoutChatInput
			}

			input ChatUpdateWithWhereUniqueWithoutUsersInput {
				where: ChatWhereUniqueInput!
				data: ChatUpdateWithoutUsersDataInput!
			}

			input ChatUpsertWithoutMessagesInput {
				update: ChatUpdateWithoutMessagesDataInput!
				create: ChatCreateWithoutMessagesInput!
			}

			input ChatUpsertWithWhereUniqueWithoutUsersInput {
				where: ChatWhereUniqueInput!
				update: ChatUpdateWithoutUsersDataInput!
				create: ChatCreateWithoutUsersInput!
			}

			input ChatWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				users_every: UserWhereInput
				users_some: UserWhereInput
				users_none: UserWhereInput
				messages_every: DirectMessageWhereInput
				messages_some: DirectMessageWhereInput
				messages_none: DirectMessageWhereInput
				AND: [ChatWhereInput!]
				OR: [ChatWhereInput!]
				NOT: [ChatWhereInput!]
			}

			input ChatWhereUniqueInput {
				id: ID
			}

			scalar DateTime

			type DirectMessage {
				id: ID!
				text: String!
				from: User!
				to: User!
				createdAt: DateTime!
				seen: Boolean
				updatedAt: DateTime!
				chat: Chat!
			}

			type DirectMessageConnection {
				pageInfo: PageInfo!
				edges: [DirectMessageEdge]!
				aggregate: AggregateDirectMessage!
			}

			input DirectMessageCreateInput {
				text: String!
				from: UserCreateOneInput!
				to: UserCreateOneInput!
				seen: Boolean
				chat: ChatCreateOneWithoutMessagesInput!
			}

			input DirectMessageCreateManyWithoutChatInput {
				create: [DirectMessageCreateWithoutChatInput!]
				connect: [DirectMessageWhereUniqueInput!]
			}

			input DirectMessageCreateWithoutChatInput {
				text: String!
				from: UserCreateOneInput!
				to: UserCreateOneInput!
				seen: Boolean
			}

			type DirectMessageEdge {
				node: DirectMessage!
				cursor: String!
			}

			enum DirectMessageOrderByInput {
				id_ASC
				id_DESC
				text_ASC
				text_DESC
				createdAt_ASC
				createdAt_DESC
				seen_ASC
				seen_DESC
				updatedAt_ASC
				updatedAt_DESC
			}

			type DirectMessagePreviousValues {
				id: ID!
				text: String!
				createdAt: DateTime!
				seen: Boolean
				updatedAt: DateTime!
			}

			input DirectMessageScalarWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				text: String
				text_not: String
				text_in: [String!]
				text_not_in: [String!]
				text_lt: String
				text_lte: String
				text_gt: String
				text_gte: String
				text_contains: String
				text_not_contains: String
				text_starts_with: String
				text_not_starts_with: String
				text_ends_with: String
				text_not_ends_with: String
				createdAt: DateTime
				createdAt_not: DateTime
				createdAt_in: [DateTime!]
				createdAt_not_in: [DateTime!]
				createdAt_lt: DateTime
				createdAt_lte: DateTime
				createdAt_gt: DateTime
				createdAt_gte: DateTime
				seen: Boolean
				seen_not: Boolean
				updatedAt: DateTime
				updatedAt_not: DateTime
				updatedAt_in: [DateTime!]
				updatedAt_not_in: [DateTime!]
				updatedAt_lt: DateTime
				updatedAt_lte: DateTime
				updatedAt_gt: DateTime
				updatedAt_gte: DateTime
				AND: [DirectMessageScalarWhereInput!]
				OR: [DirectMessageScalarWhereInput!]
				NOT: [DirectMessageScalarWhereInput!]
			}

			type DirectMessageSubscriptionPayload {
				mutation: MutationType!
				node: DirectMessage
				updatedFields: [String!]
				previousValues: DirectMessagePreviousValues
			}

			input DirectMessageSubscriptionWhereInput {
				mutation_in: [MutationType!]
				updatedFields_contains: String
				updatedFields_contains_every: [String!]
				updatedFields_contains_some: [String!]
				node: DirectMessageWhereInput
				AND: [DirectMessageSubscriptionWhereInput!]
				OR: [DirectMessageSubscriptionWhereInput!]
				NOT: [DirectMessageSubscriptionWhereInput!]
			}

			input DirectMessageUpdateInput {
				text: String
				from: UserUpdateOneRequiredInput
				to: UserUpdateOneRequiredInput
				seen: Boolean
				chat: ChatUpdateOneRequiredWithoutMessagesInput
			}

			input DirectMessageUpdateManyDataInput {
				text: String
				seen: Boolean
			}

			input DirectMessageUpdateManyMutationInput {
				text: String
				seen: Boolean
			}

			input DirectMessageUpdateManyWithoutChatInput {
				create: [DirectMessageCreateWithoutChatInput!]
				delete: [DirectMessageWhereUniqueInput!]
				connect: [DirectMessageWhereUniqueInput!]
				set: [DirectMessageWhereUniqueInput!]
				disconnect: [DirectMessageWhereUniqueInput!]
				update: [DirectMessageUpdateWithWhereUniqueWithoutChatInput!]
				upsert: [DirectMessageUpsertWithWhereUniqueWithoutChatInput!]
				deleteMany: [DirectMessageScalarWhereInput!]
				updateMany: [DirectMessageUpdateManyWithWhereNestedInput!]
			}

			input DirectMessageUpdateManyWithWhereNestedInput {
				where: DirectMessageScalarWhereInput!
				data: DirectMessageUpdateManyDataInput!
			}

			input DirectMessageUpdateWithoutChatDataInput {
				text: String
				from: UserUpdateOneRequiredInput
				to: UserUpdateOneRequiredInput
				seen: Boolean
			}

			input DirectMessageUpdateWithWhereUniqueWithoutChatInput {
				where: DirectMessageWhereUniqueInput!
				data: DirectMessageUpdateWithoutChatDataInput!
			}

			input DirectMessageUpsertWithWhereUniqueWithoutChatInput {
				where: DirectMessageWhereUniqueInput!
				update: DirectMessageUpdateWithoutChatDataInput!
				create: DirectMessageCreateWithoutChatInput!
			}

			input DirectMessageWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				text: String
				text_not: String
				text_in: [String!]
				text_not_in: [String!]
				text_lt: String
				text_lte: String
				text_gt: String
				text_gte: String
				text_contains: String
				text_not_contains: String
				text_starts_with: String
				text_not_starts_with: String
				text_ends_with: String
				text_not_ends_with: String
				from: UserWhereInput
				to: UserWhereInput
				createdAt: DateTime
				createdAt_not: DateTime
				createdAt_in: [DateTime!]
				createdAt_not_in: [DateTime!]
				createdAt_lt: DateTime
				createdAt_lte: DateTime
				createdAt_gt: DateTime
				createdAt_gte: DateTime
				seen: Boolean
				seen_not: Boolean
				updatedAt: DateTime
				updatedAt_not: DateTime
				updatedAt_in: [DateTime!]
				updatedAt_not_in: [DateTime!]
				updatedAt_lt: DateTime
				updatedAt_lte: DateTime
				updatedAt_gt: DateTime
				updatedAt_gte: DateTime
				chat: ChatWhereInput
				AND: [DirectMessageWhereInput!]
				OR: [DirectMessageWhereInput!]
				NOT: [DirectMessageWhereInput!]
			}

			input DirectMessageWhereUniqueInput {
				id: ID
			}

			type Event {
				id: ID!
				tmID: String!
				title: String!
				venue: String!
				image_url: String!
				times: [String!]!
				city: String!
				genre: String!
				category: String!
				attending(
					where: UserWhereInput
					orderBy: UserOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [User!]
			}

			type EventConnection {
				pageInfo: PageInfo!
				edges: [EventEdge]!
				aggregate: AggregateEvent!
			}

			input EventCreateInput {
				tmID: String!
				title: String!
				venue: String!
				image_url: String!
				times: EventCreatetimesInput
				city: String!
				genre: String!
				category: String!
				attending: UserCreateManyWithoutEventsInput
			}

			input EventCreateManyWithoutAttendingInput {
				create: [EventCreateWithoutAttendingInput!]
				connect: [EventWhereUniqueInput!]
			}

			input EventCreatetimesInput {
				set: [String!]
			}

			input EventCreateWithoutAttendingInput {
				tmID: String!
				title: String!
				venue: String!
				image_url: String!
				times: EventCreatetimesInput
				city: String!
				genre: String!
				category: String!
			}

			type EventEdge {
				node: Event!
				cursor: String!
			}

			enum EventOrderByInput {
				id_ASC
				id_DESC
				tmID_ASC
				tmID_DESC
				title_ASC
				title_DESC
				venue_ASC
				venue_DESC
				image_url_ASC
				image_url_DESC
				city_ASC
				city_DESC
				genre_ASC
				genre_DESC
				category_ASC
				category_DESC
				createdAt_ASC
				createdAt_DESC
				updatedAt_ASC
				updatedAt_DESC
			}

			type EventPreviousValues {
				id: ID!
				tmID: String!
				title: String!
				venue: String!
				image_url: String!
				times: [String!]!
				city: String!
				genre: String!
				category: String!
			}

			input EventScalarWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				tmID: String
				tmID_not: String
				tmID_in: [String!]
				tmID_not_in: [String!]
				tmID_lt: String
				tmID_lte: String
				tmID_gt: String
				tmID_gte: String
				tmID_contains: String
				tmID_not_contains: String
				tmID_starts_with: String
				tmID_not_starts_with: String
				tmID_ends_with: String
				tmID_not_ends_with: String
				title: String
				title_not: String
				title_in: [String!]
				title_not_in: [String!]
				title_lt: String
				title_lte: String
				title_gt: String
				title_gte: String
				title_contains: String
				title_not_contains: String
				title_starts_with: String
				title_not_starts_with: String
				title_ends_with: String
				title_not_ends_with: String
				venue: String
				venue_not: String
				venue_in: [String!]
				venue_not_in: [String!]
				venue_lt: String
				venue_lte: String
				venue_gt: String
				venue_gte: String
				venue_contains: String
				venue_not_contains: String
				venue_starts_with: String
				venue_not_starts_with: String
				venue_ends_with: String
				venue_not_ends_with: String
				image_url: String
				image_url_not: String
				image_url_in: [String!]
				image_url_not_in: [String!]
				image_url_lt: String
				image_url_lte: String
				image_url_gt: String
				image_url_gte: String
				image_url_contains: String
				image_url_not_contains: String
				image_url_starts_with: String
				image_url_not_starts_with: String
				image_url_ends_with: String
				image_url_not_ends_with: String
				city: String
				city_not: String
				city_in: [String!]
				city_not_in: [String!]
				city_lt: String
				city_lte: String
				city_gt: String
				city_gte: String
				city_contains: String
				city_not_contains: String
				city_starts_with: String
				city_not_starts_with: String
				city_ends_with: String
				city_not_ends_with: String
				genre: String
				genre_not: String
				genre_in: [String!]
				genre_not_in: [String!]
				genre_lt: String
				genre_lte: String
				genre_gt: String
				genre_gte: String
				genre_contains: String
				genre_not_contains: String
				genre_starts_with: String
				genre_not_starts_with: String
				genre_ends_with: String
				genre_not_ends_with: String
				category: String
				category_not: String
				category_in: [String!]
				category_not_in: [String!]
				category_lt: String
				category_lte: String
				category_gt: String
				category_gte: String
				category_contains: String
				category_not_contains: String
				category_starts_with: String
				category_not_starts_with: String
				category_ends_with: String
				category_not_ends_with: String
				AND: [EventScalarWhereInput!]
				OR: [EventScalarWhereInput!]
				NOT: [EventScalarWhereInput!]
			}

			type EventSubscriptionPayload {
				mutation: MutationType!
				node: Event
				updatedFields: [String!]
				previousValues: EventPreviousValues
			}

			input EventSubscriptionWhereInput {
				mutation_in: [MutationType!]
				updatedFields_contains: String
				updatedFields_contains_every: [String!]
				updatedFields_contains_some: [String!]
				node: EventWhereInput
				AND: [EventSubscriptionWhereInput!]
				OR: [EventSubscriptionWhereInput!]
				NOT: [EventSubscriptionWhereInput!]
			}

			input EventUpdateInput {
				tmID: String
				title: String
				venue: String
				image_url: String
				times: EventUpdatetimesInput
				city: String
				genre: String
				category: String
				attending: UserUpdateManyWithoutEventsInput
			}

			input EventUpdateManyDataInput {
				tmID: String
				title: String
				venue: String
				image_url: String
				times: EventUpdatetimesInput
				city: String
				genre: String
				category: String
			}

			input EventUpdateManyMutationInput {
				tmID: String
				title: String
				venue: String
				image_url: String
				times: EventUpdatetimesInput
				city: String
				genre: String
				category: String
			}

			input EventUpdateManyWithoutAttendingInput {
				create: [EventCreateWithoutAttendingInput!]
				delete: [EventWhereUniqueInput!]
				connect: [EventWhereUniqueInput!]
				set: [EventWhereUniqueInput!]
				disconnect: [EventWhereUniqueInput!]
				update: [EventUpdateWithWhereUniqueWithoutAttendingInput!]
				upsert: [EventUpsertWithWhereUniqueWithoutAttendingInput!]
				deleteMany: [EventScalarWhereInput!]
				updateMany: [EventUpdateManyWithWhereNestedInput!]
			}

			input EventUpdateManyWithWhereNestedInput {
				where: EventScalarWhereInput!
				data: EventUpdateManyDataInput!
			}

			input EventUpdatetimesInput {
				set: [String!]
			}

			input EventUpdateWithoutAttendingDataInput {
				tmID: String
				title: String
				venue: String
				image_url: String
				times: EventUpdatetimesInput
				city: String
				genre: String
				category: String
			}

			input EventUpdateWithWhereUniqueWithoutAttendingInput {
				where: EventWhereUniqueInput!
				data: EventUpdateWithoutAttendingDataInput!
			}

			input EventUpsertWithWhereUniqueWithoutAttendingInput {
				where: EventWhereUniqueInput!
				update: EventUpdateWithoutAttendingDataInput!
				create: EventCreateWithoutAttendingInput!
			}

			input EventWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				tmID: String
				tmID_not: String
				tmID_in: [String!]
				tmID_not_in: [String!]
				tmID_lt: String
				tmID_lte: String
				tmID_gt: String
				tmID_gte: String
				tmID_contains: String
				tmID_not_contains: String
				tmID_starts_with: String
				tmID_not_starts_with: String
				tmID_ends_with: String
				tmID_not_ends_with: String
				title: String
				title_not: String
				title_in: [String!]
				title_not_in: [String!]
				title_lt: String
				title_lte: String
				title_gt: String
				title_gte: String
				title_contains: String
				title_not_contains: String
				title_starts_with: String
				title_not_starts_with: String
				title_ends_with: String
				title_not_ends_with: String
				venue: String
				venue_not: String
				venue_in: [String!]
				venue_not_in: [String!]
				venue_lt: String
				venue_lte: String
				venue_gt: String
				venue_gte: String
				venue_contains: String
				venue_not_contains: String
				venue_starts_with: String
				venue_not_starts_with: String
				venue_ends_with: String
				venue_not_ends_with: String
				image_url: String
				image_url_not: String
				image_url_in: [String!]
				image_url_not_in: [String!]
				image_url_lt: String
				image_url_lte: String
				image_url_gt: String
				image_url_gte: String
				image_url_contains: String
				image_url_not_contains: String
				image_url_starts_with: String
				image_url_not_starts_with: String
				image_url_ends_with: String
				image_url_not_ends_with: String
				city: String
				city_not: String
				city_in: [String!]
				city_not_in: [String!]
				city_lt: String
				city_lte: String
				city_gt: String
				city_gte: String
				city_contains: String
				city_not_contains: String
				city_starts_with: String
				city_not_starts_with: String
				city_ends_with: String
				city_not_ends_with: String
				genre: String
				genre_not: String
				genre_in: [String!]
				genre_not_in: [String!]
				genre_lt: String
				genre_lte: String
				genre_gt: String
				genre_gte: String
				genre_contains: String
				genre_not_contains: String
				genre_starts_with: String
				genre_not_starts_with: String
				genre_ends_with: String
				genre_not_ends_with: String
				category: String
				category_not: String
				category_in: [String!]
				category_not_in: [String!]
				category_lt: String
				category_lte: String
				category_gt: String
				category_gte: String
				category_contains: String
				category_not_contains: String
				category_starts_with: String
				category_not_starts_with: String
				category_ends_with: String
				category_not_ends_with: String
				attending_every: UserWhereInput
				attending_some: UserWhereInput
				attending_none: UserWhereInput
				AND: [EventWhereInput!]
				OR: [EventWhereInput!]
				NOT: [EventWhereInput!]
			}

			input EventWhereUniqueInput {
				id: ID
				tmID: String
			}

			enum Gender {
				MALE
				FEMALE
				OTHER
			}

			enum GenderPrefs {
				MALE
				FEMALE
				OTHER
				FRIENDS
			}

			type Genre {
				id: ID!
				tmID: String!
				category: Category!
				name: String!
			}

			type GenreConnection {
				pageInfo: PageInfo!
				edges: [GenreEdge]!
				aggregate: AggregateGenre!
			}

			input GenreCreateInput {
				tmID: String!
				category: Category!
				name: String!
			}

			input GenreCreateManyInput {
				create: [GenreCreateInput!]
				connect: [GenreWhereUniqueInput!]
			}

			type GenreEdge {
				node: Genre!
				cursor: String!
			}

			enum GenreOrderByInput {
				id_ASC
				id_DESC
				tmID_ASC
				tmID_DESC
				category_ASC
				category_DESC
				name_ASC
				name_DESC
				createdAt_ASC
				createdAt_DESC
				updatedAt_ASC
				updatedAt_DESC
			}

			type GenrePreviousValues {
				id: ID!
				tmID: String!
				category: Category!
				name: String!
			}

			input GenreScalarWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				tmID: String
				tmID_not: String
				tmID_in: [String!]
				tmID_not_in: [String!]
				tmID_lt: String
				tmID_lte: String
				tmID_gt: String
				tmID_gte: String
				tmID_contains: String
				tmID_not_contains: String
				tmID_starts_with: String
				tmID_not_starts_with: String
				tmID_ends_with: String
				tmID_not_ends_with: String
				category: Category
				category_not: Category
				category_in: [Category!]
				category_not_in: [Category!]
				name: String
				name_not: String
				name_in: [String!]
				name_not_in: [String!]
				name_lt: String
				name_lte: String
				name_gt: String
				name_gte: String
				name_contains: String
				name_not_contains: String
				name_starts_with: String
				name_not_starts_with: String
				name_ends_with: String
				name_not_ends_with: String
				AND: [GenreScalarWhereInput!]
				OR: [GenreScalarWhereInput!]
				NOT: [GenreScalarWhereInput!]
			}

			type GenreSubscriptionPayload {
				mutation: MutationType!
				node: Genre
				updatedFields: [String!]
				previousValues: GenrePreviousValues
			}

			input GenreSubscriptionWhereInput {
				mutation_in: [MutationType!]
				updatedFields_contains: String
				updatedFields_contains_every: [String!]
				updatedFields_contains_some: [String!]
				node: GenreWhereInput
				AND: [GenreSubscriptionWhereInput!]
				OR: [GenreSubscriptionWhereInput!]
				NOT: [GenreSubscriptionWhereInput!]
			}

			input GenreUpdateDataInput {
				tmID: String
				category: Category
				name: String
			}

			input GenreUpdateInput {
				tmID: String
				category: Category
				name: String
			}

			input GenreUpdateManyDataInput {
				tmID: String
				category: Category
				name: String
			}

			input GenreUpdateManyInput {
				create: [GenreCreateInput!]
				update: [GenreUpdateWithWhereUniqueNestedInput!]
				upsert: [GenreUpsertWithWhereUniqueNestedInput!]
				delete: [GenreWhereUniqueInput!]
				connect: [GenreWhereUniqueInput!]
				set: [GenreWhereUniqueInput!]
				disconnect: [GenreWhereUniqueInput!]
				deleteMany: [GenreScalarWhereInput!]
				updateMany: [GenreUpdateManyWithWhereNestedInput!]
			}

			input GenreUpdateManyMutationInput {
				tmID: String
				category: Category
				name: String
			}

			input GenreUpdateManyWithWhereNestedInput {
				where: GenreScalarWhereInput!
				data: GenreUpdateManyDataInput!
			}

			input GenreUpdateWithWhereUniqueNestedInput {
				where: GenreWhereUniqueInput!
				data: GenreUpdateDataInput!
			}

			input GenreUpsertWithWhereUniqueNestedInput {
				where: GenreWhereUniqueInput!
				update: GenreUpdateDataInput!
				create: GenreCreateInput!
			}

			input GenreWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				tmID: String
				tmID_not: String
				tmID_in: [String!]
				tmID_not_in: [String!]
				tmID_lt: String
				tmID_lte: String
				tmID_gt: String
				tmID_gte: String
				tmID_contains: String
				tmID_not_contains: String
				tmID_starts_with: String
				tmID_not_starts_with: String
				tmID_ends_with: String
				tmID_not_ends_with: String
				category: Category
				category_not: Category
				category_in: [Category!]
				category_not_in: [Category!]
				name: String
				name_not: String
				name_in: [String!]
				name_not_in: [String!]
				name_lt: String
				name_lte: String
				name_gt: String
				name_gte: String
				name_contains: String
				name_not_contains: String
				name_starts_with: String
				name_not_starts_with: String
				name_ends_with: String
				name_not_ends_with: String
				AND: [GenreWhereInput!]
				OR: [GenreWhereInput!]
				NOT: [GenreWhereInput!]
			}

			input GenreWhereUniqueInput {
				id: ID
			}

			scalar Long

			type Mutation {
				createChat(data: ChatCreateInput!): Chat!
				updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
				upsertChat(
					where: ChatWhereUniqueInput!
					create: ChatCreateInput!
					update: ChatUpdateInput!
				): Chat!
				deleteChat(where: ChatWhereUniqueInput!): Chat
				deleteManyChats(where: ChatWhereInput): BatchPayload!
				createDirectMessage(data: DirectMessageCreateInput!): DirectMessage!
				updateDirectMessage(
					data: DirectMessageUpdateInput!
					where: DirectMessageWhereUniqueInput!
				): DirectMessage
				updateManyDirectMessages(
					data: DirectMessageUpdateManyMutationInput!
					where: DirectMessageWhereInput
				): BatchPayload!
				upsertDirectMessage(
					where: DirectMessageWhereUniqueInput!
					create: DirectMessageCreateInput!
					update: DirectMessageUpdateInput!
				): DirectMessage!
				deleteDirectMessage(where: DirectMessageWhereUniqueInput!): DirectMessage
				deleteManyDirectMessages(where: DirectMessageWhereInput): BatchPayload!
				createEvent(data: EventCreateInput!): Event!
				updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
				updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
				upsertEvent(
					where: EventWhereUniqueInput!
					create: EventCreateInput!
					update: EventUpdateInput!
				): Event!
				deleteEvent(where: EventWhereUniqueInput!): Event
				deleteManyEvents(where: EventWhereInput): BatchPayload!
				createGenre(data: GenreCreateInput!): Genre!
				updateGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre
				updateManyGenres(data: GenreUpdateManyMutationInput!, where: GenreWhereInput): BatchPayload!
				upsertGenre(
					where: GenreWhereUniqueInput!
					create: GenreCreateInput!
					update: GenreUpdateInput!
				): Genre!
				deleteGenre(where: GenreWhereUniqueInput!): Genre
				deleteManyGenres(where: GenreWhereInput): BatchPayload!
				createProfilePic(data: ProfilePicCreateInput!): ProfilePic!
				updateProfilePic(
					data: ProfilePicUpdateInput!
					where: ProfilePicWhereUniqueInput!
				): ProfilePic
				updateManyProfilePics(
					data: ProfilePicUpdateManyMutationInput!
					where: ProfilePicWhereInput
				): BatchPayload!
				upsertProfilePic(
					where: ProfilePicWhereUniqueInput!
					create: ProfilePicCreateInput!
					update: ProfilePicUpdateInput!
				): ProfilePic!
				deleteProfilePic(where: ProfilePicWhereUniqueInput!): ProfilePic
				deleteManyProfilePics(where: ProfilePicWhereInput): BatchPayload!
				createUser(data: UserCreateInput!): User!
				updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
				updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
				upsertUser(
					where: UserWhereUniqueInput!
					create: UserCreateInput!
					update: UserUpdateInput!
				): User!
				deleteUser(where: UserWhereUniqueInput!): User
				deleteManyUsers(where: UserWhereInput): BatchPayload!
			}

			enum MutationType {
				CREATED
				UPDATED
				DELETED
			}

			interface Node {
				id: ID!
			}

			type PageInfo {
				hasNextPage: Boolean!
				hasPreviousPage: Boolean!
				startCursor: String
				endCursor: String
			}

			enum Permission {
				FREE
				MONTHLY
				YEARLY
				ADMIN
			}

			type ProfilePic {
				id: ID!
				user: User!
				img_url: String!
				default: Boolean!
			}

			type ProfilePicConnection {
				pageInfo: PageInfo!
				edges: [ProfilePicEdge]!
				aggregate: AggregateProfilePic!
			}

			input ProfilePicCreateInput {
				user: UserCreateOneWithoutImgInput!
				img_url: String!
				default: Boolean
			}

			input ProfilePicCreateManyWithoutUserInput {
				create: [ProfilePicCreateWithoutUserInput!]
				connect: [ProfilePicWhereUniqueInput!]
			}

			input ProfilePicCreateWithoutUserInput {
				img_url: String!
				default: Boolean
			}

			type ProfilePicEdge {
				node: ProfilePic!
				cursor: String!
			}

			enum ProfilePicOrderByInput {
				id_ASC
				id_DESC
				img_url_ASC
				img_url_DESC
				default_ASC
				default_DESC
				createdAt_ASC
				createdAt_DESC
				updatedAt_ASC
				updatedAt_DESC
			}

			type ProfilePicPreviousValues {
				id: ID!
				img_url: String!
				default: Boolean!
			}

			input ProfilePicScalarWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				img_url: String
				img_url_not: String
				img_url_in: [String!]
				img_url_not_in: [String!]
				img_url_lt: String
				img_url_lte: String
				img_url_gt: String
				img_url_gte: String
				img_url_contains: String
				img_url_not_contains: String
				img_url_starts_with: String
				img_url_not_starts_with: String
				img_url_ends_with: String
				img_url_not_ends_with: String
				default: Boolean
				default_not: Boolean
				AND: [ProfilePicScalarWhereInput!]
				OR: [ProfilePicScalarWhereInput!]
				NOT: [ProfilePicScalarWhereInput!]
			}

			type ProfilePicSubscriptionPayload {
				mutation: MutationType!
				node: ProfilePic
				updatedFields: [String!]
				previousValues: ProfilePicPreviousValues
			}

			input ProfilePicSubscriptionWhereInput {
				mutation_in: [MutationType!]
				updatedFields_contains: String
				updatedFields_contains_every: [String!]
				updatedFields_contains_some: [String!]
				node: ProfilePicWhereInput
				AND: [ProfilePicSubscriptionWhereInput!]
				OR: [ProfilePicSubscriptionWhereInput!]
				NOT: [ProfilePicSubscriptionWhereInput!]
			}

			input ProfilePicUpdateInput {
				user: UserUpdateOneRequiredWithoutImgInput
				img_url: String
				default: Boolean
			}

			input ProfilePicUpdateManyDataInput {
				img_url: String
				default: Boolean
			}

			input ProfilePicUpdateManyMutationInput {
				img_url: String
				default: Boolean
			}

			input ProfilePicUpdateManyWithoutUserInput {
				create: [ProfilePicCreateWithoutUserInput!]
				delete: [ProfilePicWhereUniqueInput!]
				connect: [ProfilePicWhereUniqueInput!]
				set: [ProfilePicWhereUniqueInput!]
				disconnect: [ProfilePicWhereUniqueInput!]
				update: [ProfilePicUpdateWithWhereUniqueWithoutUserInput!]
				upsert: [ProfilePicUpsertWithWhereUniqueWithoutUserInput!]
				deleteMany: [ProfilePicScalarWhereInput!]
				updateMany: [ProfilePicUpdateManyWithWhereNestedInput!]
			}

			input ProfilePicUpdateManyWithWhereNestedInput {
				where: ProfilePicScalarWhereInput!
				data: ProfilePicUpdateManyDataInput!
			}

			input ProfilePicUpdateWithoutUserDataInput {
				img_url: String
				default: Boolean
			}

			input ProfilePicUpdateWithWhereUniqueWithoutUserInput {
				where: ProfilePicWhereUniqueInput!
				data: ProfilePicUpdateWithoutUserDataInput!
			}

			input ProfilePicUpsertWithWhereUniqueWithoutUserInput {
				where: ProfilePicWhereUniqueInput!
				update: ProfilePicUpdateWithoutUserDataInput!
				create: ProfilePicCreateWithoutUserInput!
			}

			input ProfilePicWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				user: UserWhereInput
				img_url: String
				img_url_not: String
				img_url_in: [String!]
				img_url_not_in: [String!]
				img_url_lt: String
				img_url_lte: String
				img_url_gt: String
				img_url_gte: String
				img_url_contains: String
				img_url_not_contains: String
				img_url_starts_with: String
				img_url_not_starts_with: String
				img_url_ends_with: String
				img_url_not_ends_with: String
				default: Boolean
				default_not: Boolean
				AND: [ProfilePicWhereInput!]
				OR: [ProfilePicWhereInput!]
				NOT: [ProfilePicWhereInput!]
			}

			input ProfilePicWhereUniqueInput {
				id: ID
			}

			type Query {
				chat(where: ChatWhereUniqueInput!): Chat
				chats(
					where: ChatWhereInput
					orderBy: ChatOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [Chat]!
				chatsConnection(
					where: ChatWhereInput
					orderBy: ChatOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): ChatConnection!
				directMessage(where: DirectMessageWhereUniqueInput!): DirectMessage
				directMessages(
					where: DirectMessageWhereInput
					orderBy: DirectMessageOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [DirectMessage]!
				directMessagesConnection(
					where: DirectMessageWhereInput
					orderBy: DirectMessageOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): DirectMessageConnection!
				event(where: EventWhereUniqueInput!): Event
				events(
					where: EventWhereInput
					orderBy: EventOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [Event]!
				eventsConnection(
					where: EventWhereInput
					orderBy: EventOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): EventConnection!
				genre(where: GenreWhereUniqueInput!): Genre
				genres(
					where: GenreWhereInput
					orderBy: GenreOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [Genre]!
				genresConnection(
					where: GenreWhereInput
					orderBy: GenreOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): GenreConnection!
				profilePic(where: ProfilePicWhereUniqueInput!): ProfilePic
				profilePics(
					where: ProfilePicWhereInput
					orderBy: ProfilePicOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [ProfilePic]!
				profilePicsConnection(
					where: ProfilePicWhereInput
					orderBy: ProfilePicOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): ProfilePicConnection!
				user(where: UserWhereUniqueInput!): User
				users(
					where: UserWhereInput
					orderBy: UserOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [User]!
				usersConnection(
					where: UserWhereInput
					orderBy: UserOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): UserConnection!
				node(id: ID!): Node
			}

			type Subscription {
				chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
				directMessage(where: DirectMessageSubscriptionWhereInput): DirectMessageSubscriptionPayload
				event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
				genre(where: GenreSubscriptionWhereInput): GenreSubscriptionPayload
				profilePic(where: ProfilePicSubscriptionWhereInput): ProfilePicSubscriptionPayload
				user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
			}

			type User {
				id: ID!
				firstName: String!
				lastName: String!
				password: String!
				gender: Gender
				dob: String
				location: String
				email: String!
				phone: String
				biography: String
				img(
					where: ProfilePicWhereInput
					orderBy: ProfilePicOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [ProfilePic!]
				resetToken: String
				resetTokenExpiry: Float
				interests(
					where: GenreWhereInput
					orderBy: GenreOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [Genre!]
				events(
					where: EventWhereInput
					orderBy: EventOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [Event!]
				genderPrefs: [GenderPrefs!]!
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission!
				createdAt: DateTime!
				updatedAt: DateTime!
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked(
					where: UserWhereInput
					orderBy: UserOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [User!]
				blocked(
					where: UserWhereInput
					orderBy: UserOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [User!]
				chats(
					where: ChatWhereInput
					orderBy: ChatOrderByInput
					skip: Int
					after: String
					before: String
					first: Int
					last: Int
				): [Chat!]
				verified: Boolean
			}

			type UserConnection {
				pageInfo: PageInfo!
				edges: [UserEdge]!
				aggregate: AggregateUser!
			}

			input UserCreategenderPrefsInput {
				set: [GenderPrefs!]
			}

			input UserCreateInput {
				firstName: String!
				lastName: String!
				password: String!
				gender: Gender
				dob: String
				location: String
				email: String!
				phone: String
				biography: String
				img: ProfilePicCreateManyWithoutUserInput
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreCreateManyInput
				events: EventCreateManyWithoutAttendingInput
				genderPrefs: UserCreategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission!
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked: UserCreateManyWithoutLikedInput
				blocked: UserCreateManyWithoutBlockedInput
				chats: ChatCreateManyWithoutUsersInput
				verified: Boolean
			}

			input UserCreateManyWithoutBlockedInput {
				create: [UserCreateWithoutBlockedInput!]
				connect: [UserWhereUniqueInput!]
			}

			input UserCreateManyWithoutChatsInput {
				create: [UserCreateWithoutChatsInput!]
				connect: [UserWhereUniqueInput!]
			}

			input UserCreateManyWithoutEventsInput {
				create: [UserCreateWithoutEventsInput!]
				connect: [UserWhereUniqueInput!]
			}

			input UserCreateManyWithoutLikedInput {
				create: [UserCreateWithoutLikedInput!]
				connect: [UserWhereUniqueInput!]
			}

			input UserCreateOneInput {
				create: UserCreateInput
				connect: UserWhereUniqueInput
			}

			input UserCreateOneWithoutImgInput {
				create: UserCreateWithoutImgInput
				connect: UserWhereUniqueInput
			}

			input UserCreateWithoutBlockedInput {
				firstName: String!
				lastName: String!
				password: String!
				gender: Gender
				dob: String
				location: String
				email: String!
				phone: String
				biography: String
				img: ProfilePicCreateManyWithoutUserInput
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreCreateManyInput
				events: EventCreateManyWithoutAttendingInput
				genderPrefs: UserCreategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission!
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked: UserCreateManyWithoutLikedInput
				chats: ChatCreateManyWithoutUsersInput
				verified: Boolean
			}

			input UserCreateWithoutChatsInput {
				firstName: String!
				lastName: String!
				password: String!
				gender: Gender
				dob: String
				location: String
				email: String!
				phone: String
				biography: String
				img: ProfilePicCreateManyWithoutUserInput
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreCreateManyInput
				events: EventCreateManyWithoutAttendingInput
				genderPrefs: UserCreategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission!
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked: UserCreateManyWithoutLikedInput
				blocked: UserCreateManyWithoutBlockedInput
				verified: Boolean
			}

			input UserCreateWithoutEventsInput {
				firstName: String!
				lastName: String!
				password: String!
				gender: Gender
				dob: String
				location: String
				email: String!
				phone: String
				biography: String
				img: ProfilePicCreateManyWithoutUserInput
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreCreateManyInput
				genderPrefs: UserCreategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission!
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked: UserCreateManyWithoutLikedInput
				blocked: UserCreateManyWithoutBlockedInput
				chats: ChatCreateManyWithoutUsersInput
				verified: Boolean
			}

			input UserCreateWithoutImgInput {
				firstName: String!
				lastName: String!
				password: String!
				gender: Gender
				dob: String
				location: String
				email: String!
				phone: String
				biography: String
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreCreateManyInput
				events: EventCreateManyWithoutAttendingInput
				genderPrefs: UserCreategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission!
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked: UserCreateManyWithoutLikedInput
				blocked: UserCreateManyWithoutBlockedInput
				chats: ChatCreateManyWithoutUsersInput
				verified: Boolean
			}

			input UserCreateWithoutLikedInput {
				firstName: String!
				lastName: String!
				password: String!
				gender: Gender
				dob: String
				location: String
				email: String!
				phone: String
				biography: String
				img: ProfilePicCreateManyWithoutUserInput
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreCreateManyInput
				events: EventCreateManyWithoutAttendingInput
				genderPrefs: UserCreategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission!
				stripeCustomerId: String
				stripeSubscriptionId: String
				blocked: UserCreateManyWithoutBlockedInput
				chats: ChatCreateManyWithoutUsersInput
				verified: Boolean
			}

			type UserEdge {
				node: User!
				cursor: String!
			}

			enum UserOrderByInput {
				id_ASC
				id_DESC
				firstName_ASC
				firstName_DESC
				lastName_ASC
				lastName_DESC
				password_ASC
				password_DESC
				gender_ASC
				gender_DESC
				dob_ASC
				dob_DESC
				location_ASC
				location_DESC
				email_ASC
				email_DESC
				phone_ASC
				phone_DESC
				biography_ASC
				biography_DESC
				resetToken_ASC
				resetToken_DESC
				resetTokenExpiry_ASC
				resetTokenExpiry_DESC
				minAgePref_ASC
				minAgePref_DESC
				maxAgePref_ASC
				maxAgePref_DESC
				permissions_ASC
				permissions_DESC
				createdAt_ASC
				createdAt_DESC
				updatedAt_ASC
				updatedAt_DESC
				stripeCustomerId_ASC
				stripeCustomerId_DESC
				stripeSubscriptionId_ASC
				stripeSubscriptionId_DESC
				verified_ASC
				verified_DESC
			}

			type UserPreviousValues {
				id: ID!
				firstName: String!
				lastName: String!
				password: String!
				gender: Gender
				dob: String
				location: String
				email: String!
				phone: String
				biography: String
				resetToken: String
				resetTokenExpiry: Float
				genderPrefs: [GenderPrefs!]!
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission!
				createdAt: DateTime!
				updatedAt: DateTime!
				stripeCustomerId: String
				stripeSubscriptionId: String
				verified: Boolean
			}

			input UserScalarWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				firstName: String
				firstName_not: String
				firstName_in: [String!]
				firstName_not_in: [String!]
				firstName_lt: String
				firstName_lte: String
				firstName_gt: String
				firstName_gte: String
				firstName_contains: String
				firstName_not_contains: String
				firstName_starts_with: String
				firstName_not_starts_with: String
				firstName_ends_with: String
				firstName_not_ends_with: String
				lastName: String
				lastName_not: String
				lastName_in: [String!]
				lastName_not_in: [String!]
				lastName_lt: String
				lastName_lte: String
				lastName_gt: String
				lastName_gte: String
				lastName_contains: String
				lastName_not_contains: String
				lastName_starts_with: String
				lastName_not_starts_with: String
				lastName_ends_with: String
				lastName_not_ends_with: String
				password: String
				password_not: String
				password_in: [String!]
				password_not_in: [String!]
				password_lt: String
				password_lte: String
				password_gt: String
				password_gte: String
				password_contains: String
				password_not_contains: String
				password_starts_with: String
				password_not_starts_with: String
				password_ends_with: String
				password_not_ends_with: String
				gender: Gender
				gender_not: Gender
				gender_in: [Gender!]
				gender_not_in: [Gender!]
				dob: String
				dob_not: String
				dob_in: [String!]
				dob_not_in: [String!]
				dob_lt: String
				dob_lte: String
				dob_gt: String
				dob_gte: String
				dob_contains: String
				dob_not_contains: String
				dob_starts_with: String
				dob_not_starts_with: String
				dob_ends_with: String
				dob_not_ends_with: String
				location: String
				location_not: String
				location_in: [String!]
				location_not_in: [String!]
				location_lt: String
				location_lte: String
				location_gt: String
				location_gte: String
				location_contains: String
				location_not_contains: String
				location_starts_with: String
				location_not_starts_with: String
				location_ends_with: String
				location_not_ends_with: String
				email: String
				email_not: String
				email_in: [String!]
				email_not_in: [String!]
				email_lt: String
				email_lte: String
				email_gt: String
				email_gte: String
				email_contains: String
				email_not_contains: String
				email_starts_with: String
				email_not_starts_with: String
				email_ends_with: String
				email_not_ends_with: String
				phone: String
				phone_not: String
				phone_in: [String!]
				phone_not_in: [String!]
				phone_lt: String
				phone_lte: String
				phone_gt: String
				phone_gte: String
				phone_contains: String
				phone_not_contains: String
				phone_starts_with: String
				phone_not_starts_with: String
				phone_ends_with: String
				phone_not_ends_with: String
				biography: String
				biography_not: String
				biography_in: [String!]
				biography_not_in: [String!]
				biography_lt: String
				biography_lte: String
				biography_gt: String
				biography_gte: String
				biography_contains: String
				biography_not_contains: String
				biography_starts_with: String
				biography_not_starts_with: String
				biography_ends_with: String
				biography_not_ends_with: String
				resetToken: String
				resetToken_not: String
				resetToken_in: [String!]
				resetToken_not_in: [String!]
				resetToken_lt: String
				resetToken_lte: String
				resetToken_gt: String
				resetToken_gte: String
				resetToken_contains: String
				resetToken_not_contains: String
				resetToken_starts_with: String
				resetToken_not_starts_with: String
				resetToken_ends_with: String
				resetToken_not_ends_with: String
				resetTokenExpiry: Float
				resetTokenExpiry_not: Float
				resetTokenExpiry_in: [Float!]
				resetTokenExpiry_not_in: [Float!]
				resetTokenExpiry_lt: Float
				resetTokenExpiry_lte: Float
				resetTokenExpiry_gt: Float
				resetTokenExpiry_gte: Float
				minAgePref: Int
				minAgePref_not: Int
				minAgePref_in: [Int!]
				minAgePref_not_in: [Int!]
				minAgePref_lt: Int
				minAgePref_lte: Int
				minAgePref_gt: Int
				minAgePref_gte: Int
				maxAgePref: Int
				maxAgePref_not: Int
				maxAgePref_in: [Int!]
				maxAgePref_not_in: [Int!]
				maxAgePref_lt: Int
				maxAgePref_lte: Int
				maxAgePref_gt: Int
				maxAgePref_gte: Int
				permissions: Permission
				permissions_not: Permission
				permissions_in: [Permission!]
				permissions_not_in: [Permission!]
				createdAt: DateTime
				createdAt_not: DateTime
				createdAt_in: [DateTime!]
				createdAt_not_in: [DateTime!]
				createdAt_lt: DateTime
				createdAt_lte: DateTime
				createdAt_gt: DateTime
				createdAt_gte: DateTime
				updatedAt: DateTime
				updatedAt_not: DateTime
				updatedAt_in: [DateTime!]
				updatedAt_not_in: [DateTime!]
				updatedAt_lt: DateTime
				updatedAt_lte: DateTime
				updatedAt_gt: DateTime
				updatedAt_gte: DateTime
				stripeCustomerId: String
				stripeCustomerId_not: String
				stripeCustomerId_in: [String!]
				stripeCustomerId_not_in: [String!]
				stripeCustomerId_lt: String
				stripeCustomerId_lte: String
				stripeCustomerId_gt: String
				stripeCustomerId_gte: String
				stripeCustomerId_contains: String
				stripeCustomerId_not_contains: String
				stripeCustomerId_starts_with: String
				stripeCustomerId_not_starts_with: String
				stripeCustomerId_ends_with: String
				stripeCustomerId_not_ends_with: String
				stripeSubscriptionId: String
				stripeSubscriptionId_not: String
				stripeSubscriptionId_in: [String!]
				stripeSubscriptionId_not_in: [String!]
				stripeSubscriptionId_lt: String
				stripeSubscriptionId_lte: String
				stripeSubscriptionId_gt: String
				stripeSubscriptionId_gte: String
				stripeSubscriptionId_contains: String
				stripeSubscriptionId_not_contains: String
				stripeSubscriptionId_starts_with: String
				stripeSubscriptionId_not_starts_with: String
				stripeSubscriptionId_ends_with: String
				stripeSubscriptionId_not_ends_with: String
				verified: Boolean
				verified_not: Boolean
				AND: [UserScalarWhereInput!]
				OR: [UserScalarWhereInput!]
				NOT: [UserScalarWhereInput!]
			}

			type UserSubscriptionPayload {
				mutation: MutationType!
				node: User
				updatedFields: [String!]
				previousValues: UserPreviousValues
			}

			input UserSubscriptionWhereInput {
				mutation_in: [MutationType!]
				updatedFields_contains: String
				updatedFields_contains_every: [String!]
				updatedFields_contains_some: [String!]
				node: UserWhereInput
				AND: [UserSubscriptionWhereInput!]
				OR: [UserSubscriptionWhereInput!]
				NOT: [UserSubscriptionWhereInput!]
			}

			input UserUpdateDataInput {
				firstName: String
				lastName: String
				password: String
				gender: Gender
				dob: String
				location: String
				email: String
				phone: String
				biography: String
				img: ProfilePicUpdateManyWithoutUserInput
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreUpdateManyInput
				events: EventUpdateManyWithoutAttendingInput
				genderPrefs: UserUpdategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked: UserUpdateManyWithoutLikedInput
				blocked: UserUpdateManyWithoutBlockedInput
				chats: ChatUpdateManyWithoutUsersInput
				verified: Boolean
			}

			input UserUpdategenderPrefsInput {
				set: [GenderPrefs!]
			}

			input UserUpdateInput {
				firstName: String
				lastName: String
				password: String
				gender: Gender
				dob: String
				location: String
				email: String
				phone: String
				biography: String
				img: ProfilePicUpdateManyWithoutUserInput
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreUpdateManyInput
				events: EventUpdateManyWithoutAttendingInput
				genderPrefs: UserUpdategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked: UserUpdateManyWithoutLikedInput
				blocked: UserUpdateManyWithoutBlockedInput
				chats: ChatUpdateManyWithoutUsersInput
				verified: Boolean
			}

			input UserUpdateManyDataInput {
				firstName: String
				lastName: String
				password: String
				gender: Gender
				dob: String
				location: String
				email: String
				phone: String
				biography: String
				resetToken: String
				resetTokenExpiry: Float
				genderPrefs: UserUpdategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission
				stripeCustomerId: String
				stripeSubscriptionId: String
				verified: Boolean
			}

			input UserUpdateManyMutationInput {
				firstName: String
				lastName: String
				password: String
				gender: Gender
				dob: String
				location: String
				email: String
				phone: String
				biography: String
				resetToken: String
				resetTokenExpiry: Float
				genderPrefs: UserUpdategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission
				stripeCustomerId: String
				stripeSubscriptionId: String
				verified: Boolean
			}

			input UserUpdateManyWithoutBlockedInput {
				create: [UserCreateWithoutBlockedInput!]
				delete: [UserWhereUniqueInput!]
				connect: [UserWhereUniqueInput!]
				set: [UserWhereUniqueInput!]
				disconnect: [UserWhereUniqueInput!]
				update: [UserUpdateWithWhereUniqueWithoutBlockedInput!]
				upsert: [UserUpsertWithWhereUniqueWithoutBlockedInput!]
				deleteMany: [UserScalarWhereInput!]
				updateMany: [UserUpdateManyWithWhereNestedInput!]
			}

			input UserUpdateManyWithoutChatsInput {
				create: [UserCreateWithoutChatsInput!]
				delete: [UserWhereUniqueInput!]
				connect: [UserWhereUniqueInput!]
				set: [UserWhereUniqueInput!]
				disconnect: [UserWhereUniqueInput!]
				update: [UserUpdateWithWhereUniqueWithoutChatsInput!]
				upsert: [UserUpsertWithWhereUniqueWithoutChatsInput!]
				deleteMany: [UserScalarWhereInput!]
				updateMany: [UserUpdateManyWithWhereNestedInput!]
			}

			input UserUpdateManyWithoutEventsInput {
				create: [UserCreateWithoutEventsInput!]
				delete: [UserWhereUniqueInput!]
				connect: [UserWhereUniqueInput!]
				set: [UserWhereUniqueInput!]
				disconnect: [UserWhereUniqueInput!]
				update: [UserUpdateWithWhereUniqueWithoutEventsInput!]
				upsert: [UserUpsertWithWhereUniqueWithoutEventsInput!]
				deleteMany: [UserScalarWhereInput!]
				updateMany: [UserUpdateManyWithWhereNestedInput!]
			}

			input UserUpdateManyWithoutLikedInput {
				create: [UserCreateWithoutLikedInput!]
				delete: [UserWhereUniqueInput!]
				connect: [UserWhereUniqueInput!]
				set: [UserWhereUniqueInput!]
				disconnect: [UserWhereUniqueInput!]
				update: [UserUpdateWithWhereUniqueWithoutLikedInput!]
				upsert: [UserUpsertWithWhereUniqueWithoutLikedInput!]
				deleteMany: [UserScalarWhereInput!]
				updateMany: [UserUpdateManyWithWhereNestedInput!]
			}

			input UserUpdateManyWithWhereNestedInput {
				where: UserScalarWhereInput!
				data: UserUpdateManyDataInput!
			}

			input UserUpdateOneRequiredInput {
				create: UserCreateInput
				update: UserUpdateDataInput
				upsert: UserUpsertNestedInput
				connect: UserWhereUniqueInput
			}

			input UserUpdateOneRequiredWithoutImgInput {
				create: UserCreateWithoutImgInput
				update: UserUpdateWithoutImgDataInput
				upsert: UserUpsertWithoutImgInput
				connect: UserWhereUniqueInput
			}

			input UserUpdateWithoutBlockedDataInput {
				firstName: String
				lastName: String
				password: String
				gender: Gender
				dob: String
				location: String
				email: String
				phone: String
				biography: String
				img: ProfilePicUpdateManyWithoutUserInput
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreUpdateManyInput
				events: EventUpdateManyWithoutAttendingInput
				genderPrefs: UserUpdategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked: UserUpdateManyWithoutLikedInput
				chats: ChatUpdateManyWithoutUsersInput
				verified: Boolean
			}

			input UserUpdateWithoutChatsDataInput {
				firstName: String
				lastName: String
				password: String
				gender: Gender
				dob: String
				location: String
				email: String
				phone: String
				biography: String
				img: ProfilePicUpdateManyWithoutUserInput
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreUpdateManyInput
				events: EventUpdateManyWithoutAttendingInput
				genderPrefs: UserUpdategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked: UserUpdateManyWithoutLikedInput
				blocked: UserUpdateManyWithoutBlockedInput
				verified: Boolean
			}

			input UserUpdateWithoutEventsDataInput {
				firstName: String
				lastName: String
				password: String
				gender: Gender
				dob: String
				location: String
				email: String
				phone: String
				biography: String
				img: ProfilePicUpdateManyWithoutUserInput
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreUpdateManyInput
				genderPrefs: UserUpdategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked: UserUpdateManyWithoutLikedInput
				blocked: UserUpdateManyWithoutBlockedInput
				chats: ChatUpdateManyWithoutUsersInput
				verified: Boolean
			}

			input UserUpdateWithoutImgDataInput {
				firstName: String
				lastName: String
				password: String
				gender: Gender
				dob: String
				location: String
				email: String
				phone: String
				biography: String
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreUpdateManyInput
				events: EventUpdateManyWithoutAttendingInput
				genderPrefs: UserUpdategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission
				stripeCustomerId: String
				stripeSubscriptionId: String
				liked: UserUpdateManyWithoutLikedInput
				blocked: UserUpdateManyWithoutBlockedInput
				chats: ChatUpdateManyWithoutUsersInput
				verified: Boolean
			}

			input UserUpdateWithoutLikedDataInput {
				firstName: String
				lastName: String
				password: String
				gender: Gender
				dob: String
				location: String
				email: String
				phone: String
				biography: String
				img: ProfilePicUpdateManyWithoutUserInput
				resetToken: String
				resetTokenExpiry: Float
				interests: GenreUpdateManyInput
				events: EventUpdateManyWithoutAttendingInput
				genderPrefs: UserUpdategenderPrefsInput
				minAgePref: Int
				maxAgePref: Int
				permissions: Permission
				stripeCustomerId: String
				stripeSubscriptionId: String
				blocked: UserUpdateManyWithoutBlockedInput
				chats: ChatUpdateManyWithoutUsersInput
				verified: Boolean
			}

			input UserUpdateWithWhereUniqueWithoutBlockedInput {
				where: UserWhereUniqueInput!
				data: UserUpdateWithoutBlockedDataInput!
			}

			input UserUpdateWithWhereUniqueWithoutChatsInput {
				where: UserWhereUniqueInput!
				data: UserUpdateWithoutChatsDataInput!
			}

			input UserUpdateWithWhereUniqueWithoutEventsInput {
				where: UserWhereUniqueInput!
				data: UserUpdateWithoutEventsDataInput!
			}

			input UserUpdateWithWhereUniqueWithoutLikedInput {
				where: UserWhereUniqueInput!
				data: UserUpdateWithoutLikedDataInput!
			}

			input UserUpsertNestedInput {
				update: UserUpdateDataInput!
				create: UserCreateInput!
			}

			input UserUpsertWithoutImgInput {
				update: UserUpdateWithoutImgDataInput!
				create: UserCreateWithoutImgInput!
			}

			input UserUpsertWithWhereUniqueWithoutBlockedInput {
				where: UserWhereUniqueInput!
				update: UserUpdateWithoutBlockedDataInput!
				create: UserCreateWithoutBlockedInput!
			}

			input UserUpsertWithWhereUniqueWithoutChatsInput {
				where: UserWhereUniqueInput!
				update: UserUpdateWithoutChatsDataInput!
				create: UserCreateWithoutChatsInput!
			}

			input UserUpsertWithWhereUniqueWithoutEventsInput {
				where: UserWhereUniqueInput!
				update: UserUpdateWithoutEventsDataInput!
				create: UserCreateWithoutEventsInput!
			}

			input UserUpsertWithWhereUniqueWithoutLikedInput {
				where: UserWhereUniqueInput!
				update: UserUpdateWithoutLikedDataInput!
				create: UserCreateWithoutLikedInput!
			}

			input UserWhereInput {
				id: ID
				id_not: ID
				id_in: [ID!]
				id_not_in: [ID!]
				id_lt: ID
				id_lte: ID
				id_gt: ID
				id_gte: ID
				id_contains: ID
				id_not_contains: ID
				id_starts_with: ID
				id_not_starts_with: ID
				id_ends_with: ID
				id_not_ends_with: ID
				firstName: String
				firstName_not: String
				firstName_in: [String!]
				firstName_not_in: [String!]
				firstName_lt: String
				firstName_lte: String
				firstName_gt: String
				firstName_gte: String
				firstName_contains: String
				firstName_not_contains: String
				firstName_starts_with: String
				firstName_not_starts_with: String
				firstName_ends_with: String
				firstName_not_ends_with: String
				lastName: String
				lastName_not: String
				lastName_in: [String!]
				lastName_not_in: [String!]
				lastName_lt: String
				lastName_lte: String
				lastName_gt: String
				lastName_gte: String
				lastName_contains: String
				lastName_not_contains: String
				lastName_starts_with: String
				lastName_not_starts_with: String
				lastName_ends_with: String
				lastName_not_ends_with: String
				password: String
				password_not: String
				password_in: [String!]
				password_not_in: [String!]
				password_lt: String
				password_lte: String
				password_gt: String
				password_gte: String
				password_contains: String
				password_not_contains: String
				password_starts_with: String
				password_not_starts_with: String
				password_ends_with: String
				password_not_ends_with: String
				gender: Gender
				gender_not: Gender
				gender_in: [Gender!]
				gender_not_in: [Gender!]
				dob: String
				dob_not: String
				dob_in: [String!]
				dob_not_in: [String!]
				dob_lt: String
				dob_lte: String
				dob_gt: String
				dob_gte: String
				dob_contains: String
				dob_not_contains: String
				dob_starts_with: String
				dob_not_starts_with: String
				dob_ends_with: String
				dob_not_ends_with: String
				location: String
				location_not: String
				location_in: [String!]
				location_not_in: [String!]
				location_lt: String
				location_lte: String
				location_gt: String
				location_gte: String
				location_contains: String
				location_not_contains: String
				location_starts_with: String
				location_not_starts_with: String
				location_ends_with: String
				location_not_ends_with: String
				email: String
				email_not: String
				email_in: [String!]
				email_not_in: [String!]
				email_lt: String
				email_lte: String
				email_gt: String
				email_gte: String
				email_contains: String
				email_not_contains: String
				email_starts_with: String
				email_not_starts_with: String
				email_ends_with: String
				email_not_ends_with: String
				phone: String
				phone_not: String
				phone_in: [String!]
				phone_not_in: [String!]
				phone_lt: String
				phone_lte: String
				phone_gt: String
				phone_gte: String
				phone_contains: String
				phone_not_contains: String
				phone_starts_with: String
				phone_not_starts_with: String
				phone_ends_with: String
				phone_not_ends_with: String
				biography: String
				biography_not: String
				biography_in: [String!]
				biography_not_in: [String!]
				biography_lt: String
				biography_lte: String
				biography_gt: String
				biography_gte: String
				biography_contains: String
				biography_not_contains: String
				biography_starts_with: String
				biography_not_starts_with: String
				biography_ends_with: String
				biography_not_ends_with: String
				img_every: ProfilePicWhereInput
				img_some: ProfilePicWhereInput
				img_none: ProfilePicWhereInput
				resetToken: String
				resetToken_not: String
				resetToken_in: [String!]
				resetToken_not_in: [String!]
				resetToken_lt: String
				resetToken_lte: String
				resetToken_gt: String
				resetToken_gte: String
				resetToken_contains: String
				resetToken_not_contains: String
				resetToken_starts_with: String
				resetToken_not_starts_with: String
				resetToken_ends_with: String
				resetToken_not_ends_with: String
				resetTokenExpiry: Float
				resetTokenExpiry_not: Float
				resetTokenExpiry_in: [Float!]
				resetTokenExpiry_not_in: [Float!]
				resetTokenExpiry_lt: Float
				resetTokenExpiry_lte: Float
				resetTokenExpiry_gt: Float
				resetTokenExpiry_gte: Float
				interests_every: GenreWhereInput
				interests_some: GenreWhereInput
				interests_none: GenreWhereInput
				events_every: EventWhereInput
				events_some: EventWhereInput
				events_none: EventWhereInput
				minAgePref: Int
				minAgePref_not: Int
				minAgePref_in: [Int!]
				minAgePref_not_in: [Int!]
				minAgePref_lt: Int
				minAgePref_lte: Int
				minAgePref_gt: Int
				minAgePref_gte: Int
				maxAgePref: Int
				maxAgePref_not: Int
				maxAgePref_in: [Int!]
				maxAgePref_not_in: [Int!]
				maxAgePref_lt: Int
				maxAgePref_lte: Int
				maxAgePref_gt: Int
				maxAgePref_gte: Int
				permissions: Permission
				permissions_not: Permission
				permissions_in: [Permission!]
				permissions_not_in: [Permission!]
				createdAt: DateTime
				createdAt_not: DateTime
				createdAt_in: [DateTime!]
				createdAt_not_in: [DateTime!]
				createdAt_lt: DateTime
				createdAt_lte: DateTime
				createdAt_gt: DateTime
				createdAt_gte: DateTime
				updatedAt: DateTime
				updatedAt_not: DateTime
				updatedAt_in: [DateTime!]
				updatedAt_not_in: [DateTime!]
				updatedAt_lt: DateTime
				updatedAt_lte: DateTime
				updatedAt_gt: DateTime
				updatedAt_gte: DateTime
				stripeCustomerId: String
				stripeCustomerId_not: String
				stripeCustomerId_in: [String!]
				stripeCustomerId_not_in: [String!]
				stripeCustomerId_lt: String
				stripeCustomerId_lte: String
				stripeCustomerId_gt: String
				stripeCustomerId_gte: String
				stripeCustomerId_contains: String
				stripeCustomerId_not_contains: String
				stripeCustomerId_starts_with: String
				stripeCustomerId_not_starts_with: String
				stripeCustomerId_ends_with: String
				stripeCustomerId_not_ends_with: String
				stripeSubscriptionId: String
				stripeSubscriptionId_not: String
				stripeSubscriptionId_in: [String!]
				stripeSubscriptionId_not_in: [String!]
				stripeSubscriptionId_lt: String
				stripeSubscriptionId_lte: String
				stripeSubscriptionId_gt: String
				stripeSubscriptionId_gte: String
				stripeSubscriptionId_contains: String
				stripeSubscriptionId_not_contains: String
				stripeSubscriptionId_starts_with: String
				stripeSubscriptionId_not_starts_with: String
				stripeSubscriptionId_ends_with: String
				stripeSubscriptionId_not_ends_with: String
				liked_every: UserWhereInput
				liked_some: UserWhereInput
				liked_none: UserWhereInput
				blocked_every: UserWhereInput
				blocked_some: UserWhereInput
				blocked_none: UserWhereInput
				chats_every: ChatWhereInput
				chats_some: ChatWhereInput
				chats_none: ChatWhereInput
				verified: Boolean
				verified_not: Boolean
				AND: [UserWhereInput!]
				OR: [UserWhereInput!]
				NOT: [UserWhereInput!]
			}

			input UserWhereUniqueInput {
				id: ID
				email: String
				phone: String
			}
		`
};
