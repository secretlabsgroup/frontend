// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  chat: (where?: ChatWhereInput) => Promise<boolean>;
  directMessage: (where?: DirectMessageWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  genre: (where?: GenreWhereInput) => Promise<boolean>;
  profilePic: (where?: ProfilePicWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chat: (where: ChatWhereUniqueInput) => ChatPromise;
  chats: (
    args?: {
      where?: ChatWhereInput;
      orderBy?: ChatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chat>;
  chatsConnection: (
    args?: {
      where?: ChatWhereInput;
      orderBy?: ChatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ChatConnectionPromise;
  directMessage: (where: DirectMessageWhereUniqueInput) => DirectMessagePromise;
  directMessages: (
    args?: {
      where?: DirectMessageWhereInput;
      orderBy?: DirectMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DirectMessage>;
  directMessagesConnection: (
    args?: {
      where?: DirectMessageWhereInput;
      orderBy?: DirectMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DirectMessageConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventPromise;
  events: (
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Event>;
  eventsConnection: (
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EventConnectionPromise;
  genre: (where: GenreWhereUniqueInput) => GenrePromise;
  genres: (
    args?: {
      where?: GenreWhereInput;
      orderBy?: GenreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Genre>;
  genresConnection: (
    args?: {
      where?: GenreWhereInput;
      orderBy?: GenreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GenreConnectionPromise;
  profilePic: (where: ProfilePicWhereUniqueInput) => ProfilePicPromise;
  profilePics: (
    args?: {
      where?: ProfilePicWhereInput;
      orderBy?: ProfilePicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ProfilePic>;
  profilePicsConnection: (
    args?: {
      where?: ProfilePicWhereInput;
      orderBy?: ProfilePicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProfilePicConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChat: (data: ChatCreateInput) => ChatPromise;
  updateChat: (
    args: { data: ChatUpdateInput; where: ChatWhereUniqueInput }
  ) => ChatPromise;
  upsertChat: (
    args: {
      where: ChatWhereUniqueInput;
      create: ChatCreateInput;
      update: ChatUpdateInput;
    }
  ) => ChatPromise;
  deleteChat: (where: ChatWhereUniqueInput) => ChatPromise;
  deleteManyChats: (where?: ChatWhereInput) => BatchPayloadPromise;
  createDirectMessage: (data: DirectMessageCreateInput) => DirectMessagePromise;
  updateDirectMessage: (
    args: {
      data: DirectMessageUpdateInput;
      where: DirectMessageWhereUniqueInput;
    }
  ) => DirectMessagePromise;
  updateManyDirectMessages: (
    args: {
      data: DirectMessageUpdateManyMutationInput;
      where?: DirectMessageWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDirectMessage: (
    args: {
      where: DirectMessageWhereUniqueInput;
      create: DirectMessageCreateInput;
      update: DirectMessageUpdateInput;
    }
  ) => DirectMessagePromise;
  deleteDirectMessage: (
    where: DirectMessageWhereUniqueInput
  ) => DirectMessagePromise;
  deleteManyDirectMessages: (
    where?: DirectMessageWhereInput
  ) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (
    args: { data: EventUpdateInput; where: EventWhereUniqueInput }
  ) => EventPromise;
  updateManyEvents: (
    args: { data: EventUpdateManyMutationInput; where?: EventWhereInput }
  ) => BatchPayloadPromise;
  upsertEvent: (
    args: {
      where: EventWhereUniqueInput;
      create: EventCreateInput;
      update: EventUpdateInput;
    }
  ) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createGenre: (data: GenreCreateInput) => GenrePromise;
  updateGenre: (
    args: { data: GenreUpdateInput; where: GenreWhereUniqueInput }
  ) => GenrePromise;
  updateManyGenres: (
    args: { data: GenreUpdateManyMutationInput; where?: GenreWhereInput }
  ) => BatchPayloadPromise;
  upsertGenre: (
    args: {
      where: GenreWhereUniqueInput;
      create: GenreCreateInput;
      update: GenreUpdateInput;
    }
  ) => GenrePromise;
  deleteGenre: (where: GenreWhereUniqueInput) => GenrePromise;
  deleteManyGenres: (where?: GenreWhereInput) => BatchPayloadPromise;
  createProfilePic: (data: ProfilePicCreateInput) => ProfilePicPromise;
  updateProfilePic: (
    args: { data: ProfilePicUpdateInput; where: ProfilePicWhereUniqueInput }
  ) => ProfilePicPromise;
  updateManyProfilePics: (
    args: {
      data: ProfilePicUpdateManyMutationInput;
      where?: ProfilePicWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertProfilePic: (
    args: {
      where: ProfilePicWhereUniqueInput;
      create: ProfilePicCreateInput;
      update: ProfilePicUpdateInput;
    }
  ) => ProfilePicPromise;
  deleteProfilePic: (where: ProfilePicWhereUniqueInput) => ProfilePicPromise;
  deleteManyProfilePics: (where?: ProfilePicWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chat: (
    where?: ChatSubscriptionWhereInput
  ) => ChatSubscriptionPayloadSubscription;
  directMessage: (
    where?: DirectMessageSubscriptionWhereInput
  ) => DirectMessageSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  genre: (
    where?: GenreSubscriptionWhereInput
  ) => GenreSubscriptionPayloadSubscription;
  profilePic: (
    where?: ProfilePicSubscriptionWhereInput
  ) => ProfilePicSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Gender = "MALE" | "FEMALE" | "OTHER";

export type Category = "MUSIC" | "ARTS_THEATRE" | "SPORTS" | "MISCELLANEOUS";

export type Permission = "FREE" | "MONTHLY" | "YEARLY" | "ADMIN";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "location_ASC"
  | "location_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "biography_ASC"
  | "biography_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "minAgePref_ASC"
  | "minAgePref_DESC"
  | "maxAgePref_ASC"
  | "maxAgePref_DESC"
  | "permissions_ASC"
  | "permissions_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "stripeCustomerId_ASC"
  | "stripeCustomerId_DESC"
  | "stripeSubscriptionId_ASC"
  | "stripeSubscriptionId_DESC"
  | "verified_ASC"
  | "verified_DESC";

export type ProfilePicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "img_url_ASC"
  | "img_url_DESC"
  | "default_ASC"
  | "default_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GenreOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "tmID_ASC"
  | "tmID_DESC"
  | "category_ASC"
  | "category_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "tmID_ASC"
  | "tmID_DESC"
  | "title_ASC"
  | "title_DESC"
  | "venue_ASC"
  | "venue_DESC"
  | "image_url_ASC"
  | "image_url_DESC"
  | "city_ASC"
  | "city_DESC"
  | "genre_ASC"
  | "genre_DESC"
  | "category_ASC"
  | "category_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GenderPrefs = "MALE" | "FEMALE" | "OTHER" | "FRIENDS";

export type ChatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DirectMessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "seen_ASC"
  | "seen_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ChatWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  dob?: String;
  dob_not?: String;
  dob_in?: String[] | String;
  dob_not_in?: String[] | String;
  dob_lt?: String;
  dob_lte?: String;
  dob_gt?: String;
  dob_gte?: String;
  dob_contains?: String;
  dob_not_contains?: String;
  dob_starts_with?: String;
  dob_not_starts_with?: String;
  dob_ends_with?: String;
  dob_not_ends_with?: String;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  biography?: String;
  biography_not?: String;
  biography_in?: String[] | String;
  biography_not_in?: String[] | String;
  biography_lt?: String;
  biography_lte?: String;
  biography_gt?: String;
  biography_gte?: String;
  biography_contains?: String;
  biography_not_contains?: String;
  biography_starts_with?: String;
  biography_not_starts_with?: String;
  biography_ends_with?: String;
  biography_not_ends_with?: String;
  img_every?: ProfilePicWhereInput;
  img_some?: ProfilePicWhereInput;
  img_none?: ProfilePicWhereInput;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: Float;
  resetTokenExpiry_not?: Float;
  resetTokenExpiry_in?: Float[] | Float;
  resetTokenExpiry_not_in?: Float[] | Float;
  resetTokenExpiry_lt?: Float;
  resetTokenExpiry_lte?: Float;
  resetTokenExpiry_gt?: Float;
  resetTokenExpiry_gte?: Float;
  interests_every?: GenreWhereInput;
  interests_some?: GenreWhereInput;
  interests_none?: GenreWhereInput;
  events_every?: EventWhereInput;
  events_some?: EventWhereInput;
  events_none?: EventWhereInput;
  minAgePref?: Int;
  minAgePref_not?: Int;
  minAgePref_in?: Int[] | Int;
  minAgePref_not_in?: Int[] | Int;
  minAgePref_lt?: Int;
  minAgePref_lte?: Int;
  minAgePref_gt?: Int;
  minAgePref_gte?: Int;
  maxAgePref?: Int;
  maxAgePref_not?: Int;
  maxAgePref_in?: Int[] | Int;
  maxAgePref_not_in?: Int[] | Int;
  maxAgePref_lt?: Int;
  maxAgePref_lte?: Int;
  maxAgePref_gt?: Int;
  maxAgePref_gte?: Int;
  permissions?: Permission;
  permissions_not?: Permission;
  permissions_in?: Permission[] | Permission;
  permissions_not_in?: Permission[] | Permission;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  stripeCustomerId?: String;
  stripeCustomerId_not?: String;
  stripeCustomerId_in?: String[] | String;
  stripeCustomerId_not_in?: String[] | String;
  stripeCustomerId_lt?: String;
  stripeCustomerId_lte?: String;
  stripeCustomerId_gt?: String;
  stripeCustomerId_gte?: String;
  stripeCustomerId_contains?: String;
  stripeCustomerId_not_contains?: String;
  stripeCustomerId_starts_with?: String;
  stripeCustomerId_not_starts_with?: String;
  stripeCustomerId_ends_with?: String;
  stripeCustomerId_not_ends_with?: String;
  stripeSubscriptionId?: String;
  stripeSubscriptionId_not?: String;
  stripeSubscriptionId_in?: String[] | String;
  stripeSubscriptionId_not_in?: String[] | String;
  stripeSubscriptionId_lt?: String;
  stripeSubscriptionId_lte?: String;
  stripeSubscriptionId_gt?: String;
  stripeSubscriptionId_gte?: String;
  stripeSubscriptionId_contains?: String;
  stripeSubscriptionId_not_contains?: String;
  stripeSubscriptionId_starts_with?: String;
  stripeSubscriptionId_not_starts_with?: String;
  stripeSubscriptionId_ends_with?: String;
  stripeSubscriptionId_not_ends_with?: String;
  liked_every?: UserWhereInput;
  liked_some?: UserWhereInput;
  liked_none?: UserWhereInput;
  blocked_every?: UserWhereInput;
  blocked_some?: UserWhereInput;
  blocked_none?: UserWhereInput;
  chats_every?: ChatWhereInput;
  chats_some?: ChatWhereInput;
  chats_none?: ChatWhereInput;
  verified?: Boolean;
  verified_not?: Boolean;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ProfilePicWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  img_url?: String;
  img_url_not?: String;
  img_url_in?: String[] | String;
  img_url_not_in?: String[] | String;
  img_url_lt?: String;
  img_url_lte?: String;
  img_url_gt?: String;
  img_url_gte?: String;
  img_url_contains?: String;
  img_url_not_contains?: String;
  img_url_starts_with?: String;
  img_url_not_starts_with?: String;
  img_url_ends_with?: String;
  img_url_not_ends_with?: String;
  default?: Boolean;
  default_not?: Boolean;
  AND?: ProfilePicWhereInput[] | ProfilePicWhereInput;
  OR?: ProfilePicWhereInput[] | ProfilePicWhereInput;
  NOT?: ProfilePicWhereInput[] | ProfilePicWhereInput;
}

export interface GenreWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  tmID?: String;
  tmID_not?: String;
  tmID_in?: String[] | String;
  tmID_not_in?: String[] | String;
  tmID_lt?: String;
  tmID_lte?: String;
  tmID_gt?: String;
  tmID_gte?: String;
  tmID_contains?: String;
  tmID_not_contains?: String;
  tmID_starts_with?: String;
  tmID_not_starts_with?: String;
  tmID_ends_with?: String;
  tmID_not_ends_with?: String;
  category?: Category;
  category_not?: Category;
  category_in?: Category[] | Category;
  category_not_in?: Category[] | Category;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: GenreWhereInput[] | GenreWhereInput;
  OR?: GenreWhereInput[] | GenreWhereInput;
  NOT?: GenreWhereInput[] | GenreWhereInput;
}

export interface EventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  tmID?: String;
  tmID_not?: String;
  tmID_in?: String[] | String;
  tmID_not_in?: String[] | String;
  tmID_lt?: String;
  tmID_lte?: String;
  tmID_gt?: String;
  tmID_gte?: String;
  tmID_contains?: String;
  tmID_not_contains?: String;
  tmID_starts_with?: String;
  tmID_not_starts_with?: String;
  tmID_ends_with?: String;
  tmID_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  venue?: String;
  venue_not?: String;
  venue_in?: String[] | String;
  venue_not_in?: String[] | String;
  venue_lt?: String;
  venue_lte?: String;
  venue_gt?: String;
  venue_gte?: String;
  venue_contains?: String;
  venue_not_contains?: String;
  venue_starts_with?: String;
  venue_not_starts_with?: String;
  venue_ends_with?: String;
  venue_not_ends_with?: String;
  image_url?: String;
  image_url_not?: String;
  image_url_in?: String[] | String;
  image_url_not_in?: String[] | String;
  image_url_lt?: String;
  image_url_lte?: String;
  image_url_gt?: String;
  image_url_gte?: String;
  image_url_contains?: String;
  image_url_not_contains?: String;
  image_url_starts_with?: String;
  image_url_not_starts_with?: String;
  image_url_ends_with?: String;
  image_url_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  genre?: String;
  genre_not?: String;
  genre_in?: String[] | String;
  genre_not_in?: String[] | String;
  genre_lt?: String;
  genre_lte?: String;
  genre_gt?: String;
  genre_gte?: String;
  genre_contains?: String;
  genre_not_contains?: String;
  genre_starts_with?: String;
  genre_not_starts_with?: String;
  genre_ends_with?: String;
  genre_not_ends_with?: String;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  attending_every?: UserWhereInput;
  attending_some?: UserWhereInput;
  attending_none?: UserWhereInput;
  AND?: EventWhereInput[] | EventWhereInput;
  OR?: EventWhereInput[] | EventWhereInput;
  NOT?: EventWhereInput[] | EventWhereInput;
}

export interface ChatWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  messages_every?: DirectMessageWhereInput;
  messages_some?: DirectMessageWhereInput;
  messages_none?: DirectMessageWhereInput;
  AND?: ChatWhereInput[] | ChatWhereInput;
  OR?: ChatWhereInput[] | ChatWhereInput;
  NOT?: ChatWhereInput[] | ChatWhereInput;
}

export interface DirectMessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  from?: UserWhereInput;
  to?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  seen?: Boolean;
  seen_not?: Boolean;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  chat?: ChatWhereInput;
  AND?: DirectMessageWhereInput[] | DirectMessageWhereInput;
  OR?: DirectMessageWhereInput[] | DirectMessageWhereInput;
  NOT?: DirectMessageWhereInput[] | DirectMessageWhereInput;
}

export type DirectMessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type EventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  tmID?: String;
}>;

export type GenreWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type ProfilePicWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  phone?: String;
}>;

export interface ChatCreateInput {
  users?: UserCreateManyWithoutChatsInput;
  messages?: DirectMessageCreateManyWithoutChatInput;
}

export interface UserCreateManyWithoutChatsInput {
  create?: UserCreateWithoutChatsInput[] | UserCreateWithoutChatsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutChatsInput {
  firstName: String;
  lastName: String;
  password: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email: String;
  phone?: String;
  biography?: String;
  img?: ProfilePicCreateManyWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreCreateManyInput;
  events?: EventCreateManyWithoutAttendingInput;
  genderPrefs?: UserCreategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  liked?: UserCreateManyWithoutLikedInput;
  blocked?: UserCreateManyWithoutBlockedInput;
  verified?: Boolean;
}

export interface ProfilePicCreateManyWithoutUserInput {
  create?:
    | ProfilePicCreateWithoutUserInput[]
    | ProfilePicCreateWithoutUserInput;
  connect?: ProfilePicWhereUniqueInput[] | ProfilePicWhereUniqueInput;
}

export interface ProfilePicCreateWithoutUserInput {
  img_url: String;
  default?: Boolean;
}

export interface GenreCreateManyInput {
  create?: GenreCreateInput[] | GenreCreateInput;
  connect?: GenreWhereUniqueInput[] | GenreWhereUniqueInput;
}

export interface GenreCreateInput {
  tmID: String;
  category: Category;
  name: String;
}

export interface EventCreateManyWithoutAttendingInput {
  create?:
    | EventCreateWithoutAttendingInput[]
    | EventCreateWithoutAttendingInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
}

export interface EventCreateWithoutAttendingInput {
  tmID: String;
  title: String;
  venue: String;
  image_url: String;
  times?: EventCreatetimesInput;
  city: String;
  genre: String;
  category: String;
}

export interface EventCreatetimesInput {
  set?: String[] | String;
}

export interface UserCreategenderPrefsInput {
  set?: GenderPrefs[] | GenderPrefs;
}

export interface UserCreateManyWithoutLikedInput {
  create?: UserCreateWithoutLikedInput[] | UserCreateWithoutLikedInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutLikedInput {
  firstName: String;
  lastName: String;
  password: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email: String;
  phone?: String;
  biography?: String;
  img?: ProfilePicCreateManyWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreCreateManyInput;
  events?: EventCreateManyWithoutAttendingInput;
  genderPrefs?: UserCreategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  blocked?: UserCreateManyWithoutBlockedInput;
  chats?: ChatCreateManyWithoutUsersInput;
  verified?: Boolean;
}

export interface UserCreateManyWithoutBlockedInput {
  create?: UserCreateWithoutBlockedInput[] | UserCreateWithoutBlockedInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutBlockedInput {
  firstName: String;
  lastName: String;
  password: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email: String;
  phone?: String;
  biography?: String;
  img?: ProfilePicCreateManyWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreCreateManyInput;
  events?: EventCreateManyWithoutAttendingInput;
  genderPrefs?: UserCreategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  liked?: UserCreateManyWithoutLikedInput;
  chats?: ChatCreateManyWithoutUsersInput;
  verified?: Boolean;
}

export interface ChatCreateManyWithoutUsersInput {
  create?: ChatCreateWithoutUsersInput[] | ChatCreateWithoutUsersInput;
  connect?: ChatWhereUniqueInput[] | ChatWhereUniqueInput;
}

export interface ChatCreateWithoutUsersInput {
  messages?: DirectMessageCreateManyWithoutChatInput;
}

export interface DirectMessageCreateManyWithoutChatInput {
  create?:
    | DirectMessageCreateWithoutChatInput[]
    | DirectMessageCreateWithoutChatInput;
  connect?: DirectMessageWhereUniqueInput[] | DirectMessageWhereUniqueInput;
}

export interface DirectMessageCreateWithoutChatInput {
  text: String;
  from: UserCreateOneInput;
  to: UserCreateOneInput;
  seen?: Boolean;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  firstName: String;
  lastName: String;
  password: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email: String;
  phone?: String;
  biography?: String;
  img?: ProfilePicCreateManyWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreCreateManyInput;
  events?: EventCreateManyWithoutAttendingInput;
  genderPrefs?: UserCreategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  liked?: UserCreateManyWithoutLikedInput;
  blocked?: UserCreateManyWithoutBlockedInput;
  chats?: ChatCreateManyWithoutUsersInput;
  verified?: Boolean;
}

export interface ChatUpdateInput {
  users?: UserUpdateManyWithoutChatsInput;
  messages?: DirectMessageUpdateManyWithoutChatInput;
}

export interface UserUpdateManyWithoutChatsInput {
  create?: UserCreateWithoutChatsInput[] | UserCreateWithoutChatsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutChatsInput[]
    | UserUpdateWithWhereUniqueWithoutChatsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutChatsInput[]
    | UserUpsertWithWhereUniqueWithoutChatsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutChatsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutChatsDataInput;
}

export interface UserUpdateWithoutChatsDataInput {
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email?: String;
  phone?: String;
  biography?: String;
  img?: ProfilePicUpdateManyWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreUpdateManyInput;
  events?: EventUpdateManyWithoutAttendingInput;
  genderPrefs?: UserUpdategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions?: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  liked?: UserUpdateManyWithoutLikedInput;
  blocked?: UserUpdateManyWithoutBlockedInput;
  verified?: Boolean;
}

export interface ProfilePicUpdateManyWithoutUserInput {
  create?:
    | ProfilePicCreateWithoutUserInput[]
    | ProfilePicCreateWithoutUserInput;
  delete?: ProfilePicWhereUniqueInput[] | ProfilePicWhereUniqueInput;
  connect?: ProfilePicWhereUniqueInput[] | ProfilePicWhereUniqueInput;
  set?: ProfilePicWhereUniqueInput[] | ProfilePicWhereUniqueInput;
  disconnect?: ProfilePicWhereUniqueInput[] | ProfilePicWhereUniqueInput;
  update?:
    | ProfilePicUpdateWithWhereUniqueWithoutUserInput[]
    | ProfilePicUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ProfilePicUpsertWithWhereUniqueWithoutUserInput[]
    | ProfilePicUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: ProfilePicScalarWhereInput[] | ProfilePicScalarWhereInput;
  updateMany?:
    | ProfilePicUpdateManyWithWhereNestedInput[]
    | ProfilePicUpdateManyWithWhereNestedInput;
}

export interface ProfilePicUpdateWithWhereUniqueWithoutUserInput {
  where: ProfilePicWhereUniqueInput;
  data: ProfilePicUpdateWithoutUserDataInput;
}

export interface ProfilePicUpdateWithoutUserDataInput {
  img_url?: String;
  default?: Boolean;
}

export interface ProfilePicUpsertWithWhereUniqueWithoutUserInput {
  where: ProfilePicWhereUniqueInput;
  update: ProfilePicUpdateWithoutUserDataInput;
  create: ProfilePicCreateWithoutUserInput;
}

export interface ProfilePicScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  img_url?: String;
  img_url_not?: String;
  img_url_in?: String[] | String;
  img_url_not_in?: String[] | String;
  img_url_lt?: String;
  img_url_lte?: String;
  img_url_gt?: String;
  img_url_gte?: String;
  img_url_contains?: String;
  img_url_not_contains?: String;
  img_url_starts_with?: String;
  img_url_not_starts_with?: String;
  img_url_ends_with?: String;
  img_url_not_ends_with?: String;
  default?: Boolean;
  default_not?: Boolean;
  AND?: ProfilePicScalarWhereInput[] | ProfilePicScalarWhereInput;
  OR?: ProfilePicScalarWhereInput[] | ProfilePicScalarWhereInput;
  NOT?: ProfilePicScalarWhereInput[] | ProfilePicScalarWhereInput;
}

export interface ProfilePicUpdateManyWithWhereNestedInput {
  where: ProfilePicScalarWhereInput;
  data: ProfilePicUpdateManyDataInput;
}

export interface ProfilePicUpdateManyDataInput {
  img_url?: String;
  default?: Boolean;
}

export interface GenreUpdateManyInput {
  create?: GenreCreateInput[] | GenreCreateInput;
  update?:
    | GenreUpdateWithWhereUniqueNestedInput[]
    | GenreUpdateWithWhereUniqueNestedInput;
  upsert?:
    | GenreUpsertWithWhereUniqueNestedInput[]
    | GenreUpsertWithWhereUniqueNestedInput;
  delete?: GenreWhereUniqueInput[] | GenreWhereUniqueInput;
  connect?: GenreWhereUniqueInput[] | GenreWhereUniqueInput;
  set?: GenreWhereUniqueInput[] | GenreWhereUniqueInput;
  disconnect?: GenreWhereUniqueInput[] | GenreWhereUniqueInput;
  deleteMany?: GenreScalarWhereInput[] | GenreScalarWhereInput;
  updateMany?:
    | GenreUpdateManyWithWhereNestedInput[]
    | GenreUpdateManyWithWhereNestedInput;
}

export interface GenreUpdateWithWhereUniqueNestedInput {
  where: GenreWhereUniqueInput;
  data: GenreUpdateDataInput;
}

export interface GenreUpdateDataInput {
  tmID?: String;
  category?: Category;
  name?: String;
}

export interface GenreUpsertWithWhereUniqueNestedInput {
  where: GenreWhereUniqueInput;
  update: GenreUpdateDataInput;
  create: GenreCreateInput;
}

export interface GenreScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  tmID?: String;
  tmID_not?: String;
  tmID_in?: String[] | String;
  tmID_not_in?: String[] | String;
  tmID_lt?: String;
  tmID_lte?: String;
  tmID_gt?: String;
  tmID_gte?: String;
  tmID_contains?: String;
  tmID_not_contains?: String;
  tmID_starts_with?: String;
  tmID_not_starts_with?: String;
  tmID_ends_with?: String;
  tmID_not_ends_with?: String;
  category?: Category;
  category_not?: Category;
  category_in?: Category[] | Category;
  category_not_in?: Category[] | Category;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: GenreScalarWhereInput[] | GenreScalarWhereInput;
  OR?: GenreScalarWhereInput[] | GenreScalarWhereInput;
  NOT?: GenreScalarWhereInput[] | GenreScalarWhereInput;
}

export interface GenreUpdateManyWithWhereNestedInput {
  where: GenreScalarWhereInput;
  data: GenreUpdateManyDataInput;
}

export interface GenreUpdateManyDataInput {
  tmID?: String;
  category?: Category;
  name?: String;
}

export interface EventUpdateManyWithoutAttendingInput {
  create?:
    | EventCreateWithoutAttendingInput[]
    | EventCreateWithoutAttendingInput;
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  set?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  update?:
    | EventUpdateWithWhereUniqueWithoutAttendingInput[]
    | EventUpdateWithWhereUniqueWithoutAttendingInput;
  upsert?:
    | EventUpsertWithWhereUniqueWithoutAttendingInput[]
    | EventUpsertWithWhereUniqueWithoutAttendingInput;
  deleteMany?: EventScalarWhereInput[] | EventScalarWhereInput;
  updateMany?:
    | EventUpdateManyWithWhereNestedInput[]
    | EventUpdateManyWithWhereNestedInput;
}

export interface EventUpdateWithWhereUniqueWithoutAttendingInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutAttendingDataInput;
}

export interface EventUpdateWithoutAttendingDataInput {
  tmID?: String;
  title?: String;
  venue?: String;
  image_url?: String;
  times?: EventUpdatetimesInput;
  city?: String;
  genre?: String;
  category?: String;
}

export interface EventUpdatetimesInput {
  set?: String[] | String;
}

export interface EventUpsertWithWhereUniqueWithoutAttendingInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutAttendingDataInput;
  create: EventCreateWithoutAttendingInput;
}

export interface EventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  tmID?: String;
  tmID_not?: String;
  tmID_in?: String[] | String;
  tmID_not_in?: String[] | String;
  tmID_lt?: String;
  tmID_lte?: String;
  tmID_gt?: String;
  tmID_gte?: String;
  tmID_contains?: String;
  tmID_not_contains?: String;
  tmID_starts_with?: String;
  tmID_not_starts_with?: String;
  tmID_ends_with?: String;
  tmID_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  venue?: String;
  venue_not?: String;
  venue_in?: String[] | String;
  venue_not_in?: String[] | String;
  venue_lt?: String;
  venue_lte?: String;
  venue_gt?: String;
  venue_gte?: String;
  venue_contains?: String;
  venue_not_contains?: String;
  venue_starts_with?: String;
  venue_not_starts_with?: String;
  venue_ends_with?: String;
  venue_not_ends_with?: String;
  image_url?: String;
  image_url_not?: String;
  image_url_in?: String[] | String;
  image_url_not_in?: String[] | String;
  image_url_lt?: String;
  image_url_lte?: String;
  image_url_gt?: String;
  image_url_gte?: String;
  image_url_contains?: String;
  image_url_not_contains?: String;
  image_url_starts_with?: String;
  image_url_not_starts_with?: String;
  image_url_ends_with?: String;
  image_url_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  genre?: String;
  genre_not?: String;
  genre_in?: String[] | String;
  genre_not_in?: String[] | String;
  genre_lt?: String;
  genre_lte?: String;
  genre_gt?: String;
  genre_gte?: String;
  genre_contains?: String;
  genre_not_contains?: String;
  genre_starts_with?: String;
  genre_not_starts_with?: String;
  genre_ends_with?: String;
  genre_not_ends_with?: String;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  AND?: EventScalarWhereInput[] | EventScalarWhereInput;
  OR?: EventScalarWhereInput[] | EventScalarWhereInput;
  NOT?: EventScalarWhereInput[] | EventScalarWhereInput;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpdateManyDataInput {
  tmID?: String;
  title?: String;
  venue?: String;
  image_url?: String;
  times?: EventUpdatetimesInput;
  city?: String;
  genre?: String;
  category?: String;
}

export interface UserUpdategenderPrefsInput {
  set?: GenderPrefs[] | GenderPrefs;
}

export interface UserUpdateManyWithoutLikedInput {
  create?: UserCreateWithoutLikedInput[] | UserCreateWithoutLikedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutLikedInput[]
    | UserUpdateWithWhereUniqueWithoutLikedInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutLikedInput[]
    | UserUpsertWithWhereUniqueWithoutLikedInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutLikedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutLikedDataInput;
}

export interface UserUpdateWithoutLikedDataInput {
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email?: String;
  phone?: String;
  biography?: String;
  img?: ProfilePicUpdateManyWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreUpdateManyInput;
  events?: EventUpdateManyWithoutAttendingInput;
  genderPrefs?: UserUpdategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions?: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  blocked?: UserUpdateManyWithoutBlockedInput;
  chats?: ChatUpdateManyWithoutUsersInput;
  verified?: Boolean;
}

export interface UserUpdateManyWithoutBlockedInput {
  create?: UserCreateWithoutBlockedInput[] | UserCreateWithoutBlockedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutBlockedInput[]
    | UserUpdateWithWhereUniqueWithoutBlockedInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutBlockedInput[]
    | UserUpsertWithWhereUniqueWithoutBlockedInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutBlockedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBlockedDataInput;
}

export interface UserUpdateWithoutBlockedDataInput {
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email?: String;
  phone?: String;
  biography?: String;
  img?: ProfilePicUpdateManyWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreUpdateManyInput;
  events?: EventUpdateManyWithoutAttendingInput;
  genderPrefs?: UserUpdategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions?: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  liked?: UserUpdateManyWithoutLikedInput;
  chats?: ChatUpdateManyWithoutUsersInput;
  verified?: Boolean;
}

export interface ChatUpdateManyWithoutUsersInput {
  create?: ChatCreateWithoutUsersInput[] | ChatCreateWithoutUsersInput;
  delete?: ChatWhereUniqueInput[] | ChatWhereUniqueInput;
  connect?: ChatWhereUniqueInput[] | ChatWhereUniqueInput;
  set?: ChatWhereUniqueInput[] | ChatWhereUniqueInput;
  disconnect?: ChatWhereUniqueInput[] | ChatWhereUniqueInput;
  update?:
    | ChatUpdateWithWhereUniqueWithoutUsersInput[]
    | ChatUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | ChatUpsertWithWhereUniqueWithoutUsersInput[]
    | ChatUpsertWithWhereUniqueWithoutUsersInput;
  deleteMany?: ChatScalarWhereInput[] | ChatScalarWhereInput;
}

export interface ChatUpdateWithWhereUniqueWithoutUsersInput {
  where: ChatWhereUniqueInput;
  data: ChatUpdateWithoutUsersDataInput;
}

export interface ChatUpdateWithoutUsersDataInput {
  messages?: DirectMessageUpdateManyWithoutChatInput;
}

export interface DirectMessageUpdateManyWithoutChatInput {
  create?:
    | DirectMessageCreateWithoutChatInput[]
    | DirectMessageCreateWithoutChatInput;
  delete?: DirectMessageWhereUniqueInput[] | DirectMessageWhereUniqueInput;
  connect?: DirectMessageWhereUniqueInput[] | DirectMessageWhereUniqueInput;
  set?: DirectMessageWhereUniqueInput[] | DirectMessageWhereUniqueInput;
  disconnect?: DirectMessageWhereUniqueInput[] | DirectMessageWhereUniqueInput;
  update?:
    | DirectMessageUpdateWithWhereUniqueWithoutChatInput[]
    | DirectMessageUpdateWithWhereUniqueWithoutChatInput;
  upsert?:
    | DirectMessageUpsertWithWhereUniqueWithoutChatInput[]
    | DirectMessageUpsertWithWhereUniqueWithoutChatInput;
  deleteMany?: DirectMessageScalarWhereInput[] | DirectMessageScalarWhereInput;
  updateMany?:
    | DirectMessageUpdateManyWithWhereNestedInput[]
    | DirectMessageUpdateManyWithWhereNestedInput;
}

export interface DirectMessageUpdateWithWhereUniqueWithoutChatInput {
  where: DirectMessageWhereUniqueInput;
  data: DirectMessageUpdateWithoutChatDataInput;
}

export interface DirectMessageUpdateWithoutChatDataInput {
  text?: String;
  from?: UserUpdateOneRequiredInput;
  to?: UserUpdateOneRequiredInput;
  seen?: Boolean;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email?: String;
  phone?: String;
  biography?: String;
  img?: ProfilePicUpdateManyWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreUpdateManyInput;
  events?: EventUpdateManyWithoutAttendingInput;
  genderPrefs?: UserUpdategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions?: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  liked?: UserUpdateManyWithoutLikedInput;
  blocked?: UserUpdateManyWithoutBlockedInput;
  chats?: ChatUpdateManyWithoutUsersInput;
  verified?: Boolean;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface DirectMessageUpsertWithWhereUniqueWithoutChatInput {
  where: DirectMessageWhereUniqueInput;
  update: DirectMessageUpdateWithoutChatDataInput;
  create: DirectMessageCreateWithoutChatInput;
}

export interface DirectMessageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  seen?: Boolean;
  seen_not?: Boolean;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: DirectMessageScalarWhereInput[] | DirectMessageScalarWhereInput;
  OR?: DirectMessageScalarWhereInput[] | DirectMessageScalarWhereInput;
  NOT?: DirectMessageScalarWhereInput[] | DirectMessageScalarWhereInput;
}

export interface DirectMessageUpdateManyWithWhereNestedInput {
  where: DirectMessageScalarWhereInput;
  data: DirectMessageUpdateManyDataInput;
}

export interface DirectMessageUpdateManyDataInput {
  text?: String;
  seen?: Boolean;
}

export interface ChatUpsertWithWhereUniqueWithoutUsersInput {
  where: ChatWhereUniqueInput;
  update: ChatUpdateWithoutUsersDataInput;
  create: ChatCreateWithoutUsersInput;
}

export interface ChatScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: ChatScalarWhereInput[] | ChatScalarWhereInput;
  OR?: ChatScalarWhereInput[] | ChatScalarWhereInput;
  NOT?: ChatScalarWhereInput[] | ChatScalarWhereInput;
}

export interface UserUpsertWithWhereUniqueWithoutBlockedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBlockedDataInput;
  create: UserCreateWithoutBlockedInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  dob?: String;
  dob_not?: String;
  dob_in?: String[] | String;
  dob_not_in?: String[] | String;
  dob_lt?: String;
  dob_lte?: String;
  dob_gt?: String;
  dob_gte?: String;
  dob_contains?: String;
  dob_not_contains?: String;
  dob_starts_with?: String;
  dob_not_starts_with?: String;
  dob_ends_with?: String;
  dob_not_ends_with?: String;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  biography?: String;
  biography_not?: String;
  biography_in?: String[] | String;
  biography_not_in?: String[] | String;
  biography_lt?: String;
  biography_lte?: String;
  biography_gt?: String;
  biography_gte?: String;
  biography_contains?: String;
  biography_not_contains?: String;
  biography_starts_with?: String;
  biography_not_starts_with?: String;
  biography_ends_with?: String;
  biography_not_ends_with?: String;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: Float;
  resetTokenExpiry_not?: Float;
  resetTokenExpiry_in?: Float[] | Float;
  resetTokenExpiry_not_in?: Float[] | Float;
  resetTokenExpiry_lt?: Float;
  resetTokenExpiry_lte?: Float;
  resetTokenExpiry_gt?: Float;
  resetTokenExpiry_gte?: Float;
  minAgePref?: Int;
  minAgePref_not?: Int;
  minAgePref_in?: Int[] | Int;
  minAgePref_not_in?: Int[] | Int;
  minAgePref_lt?: Int;
  minAgePref_lte?: Int;
  minAgePref_gt?: Int;
  minAgePref_gte?: Int;
  maxAgePref?: Int;
  maxAgePref_not?: Int;
  maxAgePref_in?: Int[] | Int;
  maxAgePref_not_in?: Int[] | Int;
  maxAgePref_lt?: Int;
  maxAgePref_lte?: Int;
  maxAgePref_gt?: Int;
  maxAgePref_gte?: Int;
  permissions?: Permission;
  permissions_not?: Permission;
  permissions_in?: Permission[] | Permission;
  permissions_not_in?: Permission[] | Permission;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  stripeCustomerId?: String;
  stripeCustomerId_not?: String;
  stripeCustomerId_in?: String[] | String;
  stripeCustomerId_not_in?: String[] | String;
  stripeCustomerId_lt?: String;
  stripeCustomerId_lte?: String;
  stripeCustomerId_gt?: String;
  stripeCustomerId_gte?: String;
  stripeCustomerId_contains?: String;
  stripeCustomerId_not_contains?: String;
  stripeCustomerId_starts_with?: String;
  stripeCustomerId_not_starts_with?: String;
  stripeCustomerId_ends_with?: String;
  stripeCustomerId_not_ends_with?: String;
  stripeSubscriptionId?: String;
  stripeSubscriptionId_not?: String;
  stripeSubscriptionId_in?: String[] | String;
  stripeSubscriptionId_not_in?: String[] | String;
  stripeSubscriptionId_lt?: String;
  stripeSubscriptionId_lte?: String;
  stripeSubscriptionId_gt?: String;
  stripeSubscriptionId_gte?: String;
  stripeSubscriptionId_contains?: String;
  stripeSubscriptionId_not_contains?: String;
  stripeSubscriptionId_starts_with?: String;
  stripeSubscriptionId_not_starts_with?: String;
  stripeSubscriptionId_ends_with?: String;
  stripeSubscriptionId_not_ends_with?: String;
  verified?: Boolean;
  verified_not?: Boolean;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email?: String;
  phone?: String;
  biography?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  genderPrefs?: UserUpdategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions?: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  verified?: Boolean;
}

export interface UserUpsertWithWhereUniqueWithoutLikedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutLikedDataInput;
  create: UserCreateWithoutLikedInput;
}

export interface UserUpsertWithWhereUniqueWithoutChatsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutChatsDataInput;
  create: UserCreateWithoutChatsInput;
}

export interface DirectMessageCreateInput {
  text: String;
  from: UserCreateOneInput;
  to: UserCreateOneInput;
  seen?: Boolean;
  chat: ChatCreateOneWithoutMessagesInput;
}

export interface ChatCreateOneWithoutMessagesInput {
  create?: ChatCreateWithoutMessagesInput;
  connect?: ChatWhereUniqueInput;
}

export interface ChatCreateWithoutMessagesInput {
  users?: UserCreateManyWithoutChatsInput;
}

export interface DirectMessageUpdateInput {
  text?: String;
  from?: UserUpdateOneRequiredInput;
  to?: UserUpdateOneRequiredInput;
  seen?: Boolean;
  chat?: ChatUpdateOneRequiredWithoutMessagesInput;
}

export interface ChatUpdateOneRequiredWithoutMessagesInput {
  create?: ChatCreateWithoutMessagesInput;
  update?: ChatUpdateWithoutMessagesDataInput;
  upsert?: ChatUpsertWithoutMessagesInput;
  connect?: ChatWhereUniqueInput;
}

export interface ChatUpdateWithoutMessagesDataInput {
  users?: UserUpdateManyWithoutChatsInput;
}

export interface ChatUpsertWithoutMessagesInput {
  update: ChatUpdateWithoutMessagesDataInput;
  create: ChatCreateWithoutMessagesInput;
}

export interface DirectMessageUpdateManyMutationInput {
  text?: String;
  seen?: Boolean;
}

export interface EventCreateInput {
  tmID: String;
  title: String;
  venue: String;
  image_url: String;
  times?: EventCreatetimesInput;
  city: String;
  genre: String;
  category: String;
  attending?: UserCreateManyWithoutEventsInput;
}

export interface UserCreateManyWithoutEventsInput {
  create?: UserCreateWithoutEventsInput[] | UserCreateWithoutEventsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutEventsInput {
  firstName: String;
  lastName: String;
  password: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email: String;
  phone?: String;
  biography?: String;
  img?: ProfilePicCreateManyWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreCreateManyInput;
  genderPrefs?: UserCreategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  liked?: UserCreateManyWithoutLikedInput;
  blocked?: UserCreateManyWithoutBlockedInput;
  chats?: ChatCreateManyWithoutUsersInput;
  verified?: Boolean;
}

export interface EventUpdateInput {
  tmID?: String;
  title?: String;
  venue?: String;
  image_url?: String;
  times?: EventUpdatetimesInput;
  city?: String;
  genre?: String;
  category?: String;
  attending?: UserUpdateManyWithoutEventsInput;
}

export interface UserUpdateManyWithoutEventsInput {
  create?: UserCreateWithoutEventsInput[] | UserCreateWithoutEventsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutEventsInput[]
    | UserUpdateWithWhereUniqueWithoutEventsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutEventsInput[]
    | UserUpsertWithWhereUniqueWithoutEventsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutEventsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutEventsDataInput;
}

export interface UserUpdateWithoutEventsDataInput {
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email?: String;
  phone?: String;
  biography?: String;
  img?: ProfilePicUpdateManyWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreUpdateManyInput;
  genderPrefs?: UserUpdategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions?: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  liked?: UserUpdateManyWithoutLikedInput;
  blocked?: UserUpdateManyWithoutBlockedInput;
  chats?: ChatUpdateManyWithoutUsersInput;
  verified?: Boolean;
}

export interface UserUpsertWithWhereUniqueWithoutEventsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutEventsDataInput;
  create: UserCreateWithoutEventsInput;
}

export interface EventUpdateManyMutationInput {
  tmID?: String;
  title?: String;
  venue?: String;
  image_url?: String;
  times?: EventUpdatetimesInput;
  city?: String;
  genre?: String;
  category?: String;
}

export interface GenreUpdateInput {
  tmID?: String;
  category?: Category;
  name?: String;
}

export interface GenreUpdateManyMutationInput {
  tmID?: String;
  category?: Category;
  name?: String;
}

export interface ProfilePicCreateInput {
  user: UserCreateOneWithoutImgInput;
  img_url: String;
  default?: Boolean;
}

export interface UserCreateOneWithoutImgInput {
  create?: UserCreateWithoutImgInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutImgInput {
  firstName: String;
  lastName: String;
  password: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email: String;
  phone?: String;
  biography?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreCreateManyInput;
  events?: EventCreateManyWithoutAttendingInput;
  genderPrefs?: UserCreategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  liked?: UserCreateManyWithoutLikedInput;
  blocked?: UserCreateManyWithoutBlockedInput;
  chats?: ChatCreateManyWithoutUsersInput;
  verified?: Boolean;
}

export interface ProfilePicUpdateInput {
  user?: UserUpdateOneRequiredWithoutImgInput;
  img_url?: String;
  default?: Boolean;
}

export interface UserUpdateOneRequiredWithoutImgInput {
  create?: UserCreateWithoutImgInput;
  update?: UserUpdateWithoutImgDataInput;
  upsert?: UserUpsertWithoutImgInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutImgDataInput {
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email?: String;
  phone?: String;
  biography?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreUpdateManyInput;
  events?: EventUpdateManyWithoutAttendingInput;
  genderPrefs?: UserUpdategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions?: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  liked?: UserUpdateManyWithoutLikedInput;
  blocked?: UserUpdateManyWithoutBlockedInput;
  chats?: ChatUpdateManyWithoutUsersInput;
  verified?: Boolean;
}

export interface UserUpsertWithoutImgInput {
  update: UserUpdateWithoutImgDataInput;
  create: UserCreateWithoutImgInput;
}

export interface ProfilePicUpdateManyMutationInput {
  img_url?: String;
  default?: Boolean;
}

export interface UserUpdateInput {
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email?: String;
  phone?: String;
  biography?: String;
  img?: ProfilePicUpdateManyWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  interests?: GenreUpdateManyInput;
  events?: EventUpdateManyWithoutAttendingInput;
  genderPrefs?: UserUpdategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions?: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  liked?: UserUpdateManyWithoutLikedInput;
  blocked?: UserUpdateManyWithoutBlockedInput;
  chats?: ChatUpdateManyWithoutUsersInput;
  verified?: Boolean;
}

export interface UserUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email?: String;
  phone?: String;
  biography?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  genderPrefs?: UserUpdategenderPrefsInput;
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions?: Permission;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  verified?: Boolean;
}

export interface ChatSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ChatWhereInput;
  AND?: ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput;
  OR?: ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput;
  NOT?: ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput;
}

export interface DirectMessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DirectMessageWhereInput;
  AND?:
    | DirectMessageSubscriptionWhereInput[]
    | DirectMessageSubscriptionWhereInput;
  OR?:
    | DirectMessageSubscriptionWhereInput[]
    | DirectMessageSubscriptionWhereInput;
  NOT?:
    | DirectMessageSubscriptionWhereInput[]
    | DirectMessageSubscriptionWhereInput;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EventWhereInput;
  AND?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  OR?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  NOT?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
}

export interface GenreSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GenreWhereInput;
  AND?: GenreSubscriptionWhereInput[] | GenreSubscriptionWhereInput;
  OR?: GenreSubscriptionWhereInput[] | GenreSubscriptionWhereInput;
  NOT?: GenreSubscriptionWhereInput[] | GenreSubscriptionWhereInput;
}

export interface ProfilePicSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProfilePicWhereInput;
  AND?: ProfilePicSubscriptionWhereInput[] | ProfilePicSubscriptionWhereInput;
  OR?: ProfilePicSubscriptionWhereInput[] | ProfilePicSubscriptionWhereInput;
  NOT?: ProfilePicSubscriptionWhereInput[] | ProfilePicSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Chat {
  id: ID_Output;
}

export interface ChatPromise extends Promise<Chat>, Fragmentable {
  id: () => Promise<ID_Output>;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  messages: <T = FragmentableArray<DirectMessage>>(
    args?: {
      where?: DirectMessageWhereInput;
      orderBy?: DirectMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ChatSubscription
  extends Promise<AsyncIterator<Chat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  messages: <T = Promise<AsyncIterator<DirectMessageSubscription>>>(
    args?: {
      where?: DirectMessageWhereInput;
      orderBy?: DirectMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  password: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email: String;
  phone?: String;
  biography?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  genderPrefs: GenderPrefs[];
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions: Permission;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  verified?: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  gender: () => Promise<Gender>;
  dob: () => Promise<String>;
  location: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  biography: () => Promise<String>;
  img: <T = FragmentableArray<ProfilePic>>(
    args?: {
      where?: ProfilePicWhereInput;
      orderBy?: ProfilePicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  interests: <T = FragmentableArray<Genre>>(
    args?: {
      where?: GenreWhereInput;
      orderBy?: GenreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  events: <T = FragmentableArray<Event>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  genderPrefs: () => Promise<GenderPrefs[]>;
  minAgePref: () => Promise<Int>;
  maxAgePref: () => Promise<Int>;
  permissions: () => Promise<Permission>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  stripeCustomerId: () => Promise<String>;
  stripeSubscriptionId: () => Promise<String>;
  liked: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  blocked: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chats: <T = FragmentableArray<Chat>>(
    args?: {
      where?: ChatWhereInput;
      orderBy?: ChatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  verified: () => Promise<Boolean>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  dob: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  biography: () => Promise<AsyncIterator<String>>;
  img: <T = Promise<AsyncIterator<ProfilePicSubscription>>>(
    args?: {
      where?: ProfilePicWhereInput;
      orderBy?: ProfilePicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  interests: <T = Promise<AsyncIterator<GenreSubscription>>>(
    args?: {
      where?: GenreWhereInput;
      orderBy?: GenreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  genderPrefs: () => Promise<AsyncIterator<GenderPrefs[]>>;
  minAgePref: () => Promise<AsyncIterator<Int>>;
  maxAgePref: () => Promise<AsyncIterator<Int>>;
  permissions: () => Promise<AsyncIterator<Permission>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  stripeCustomerId: () => Promise<AsyncIterator<String>>;
  stripeSubscriptionId: () => Promise<AsyncIterator<String>>;
  liked: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  blocked: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chats: <T = Promise<AsyncIterator<ChatSubscription>>>(
    args?: {
      where?: ChatWhereInput;
      orderBy?: ChatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  verified: () => Promise<AsyncIterator<Boolean>>;
}

export interface ProfilePic {
  id: ID_Output;
  img_url: String;
  default: Boolean;
}

export interface ProfilePicPromise extends Promise<ProfilePic>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  img_url: () => Promise<String>;
  default: () => Promise<Boolean>;
}

export interface ProfilePicSubscription
  extends Promise<AsyncIterator<ProfilePic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  img_url: () => Promise<AsyncIterator<String>>;
  default: () => Promise<AsyncIterator<Boolean>>;
}

export interface Genre {
  id: ID_Output;
  tmID: String;
  category: Category;
  name: String;
}

export interface GenrePromise extends Promise<Genre>, Fragmentable {
  id: () => Promise<ID_Output>;
  tmID: () => Promise<String>;
  category: () => Promise<Category>;
  name: () => Promise<String>;
}

export interface GenreSubscription
  extends Promise<AsyncIterator<Genre>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tmID: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<Category>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Event {
  id: ID_Output;
  tmID: String;
  title: String;
  venue: String;
  image_url: String;
  times: String[];
  city: String;
  genre: String;
  category: String;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  tmID: () => Promise<String>;
  title: () => Promise<String>;
  venue: () => Promise<String>;
  image_url: () => Promise<String>;
  times: () => Promise<String[]>;
  city: () => Promise<String>;
  genre: () => Promise<String>;
  category: () => Promise<String>;
  attending: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tmID: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  venue: () => Promise<AsyncIterator<String>>;
  image_url: () => Promise<AsyncIterator<String>>;
  times: () => Promise<AsyncIterator<String[]>>;
  city: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  attending: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface DirectMessage {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  seen?: Boolean;
  updatedAt: DateTimeOutput;
}

export interface DirectMessagePromise
  extends Promise<DirectMessage>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  seen: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  chat: <T = ChatPromise>() => T;
}

export interface DirectMessageSubscription
  extends Promise<AsyncIterator<DirectMessage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  from: <T = UserSubscription>() => T;
  to: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  seen: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  chat: <T = ChatSubscription>() => T;
}

export interface ChatConnection {
  pageInfo: PageInfo;
  edges: ChatEdge[];
}

export interface ChatConnectionPromise
  extends Promise<ChatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChatEdge>>() => T;
  aggregate: <T = AggregateChatPromise>() => T;
}

export interface ChatConnectionSubscription
  extends Promise<AsyncIterator<ChatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChatSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChatEdge {
  node: Chat;
  cursor: String;
}

export interface ChatEdgePromise extends Promise<ChatEdge>, Fragmentable {
  node: <T = ChatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChatEdgeSubscription
  extends Promise<AsyncIterator<ChatEdge>>,
    Fragmentable {
  node: <T = ChatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChat {
  count: Int;
}

export interface AggregateChatPromise
  extends Promise<AggregateChat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChatSubscription
  extends Promise<AsyncIterator<AggregateChat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DirectMessageConnection {
  pageInfo: PageInfo;
  edges: DirectMessageEdge[];
}

export interface DirectMessageConnectionPromise
  extends Promise<DirectMessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DirectMessageEdge>>() => T;
  aggregate: <T = AggregateDirectMessagePromise>() => T;
}

export interface DirectMessageConnectionSubscription
  extends Promise<AsyncIterator<DirectMessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DirectMessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDirectMessageSubscription>() => T;
}

export interface DirectMessageEdge {
  node: DirectMessage;
  cursor: String;
}

export interface DirectMessageEdgePromise
  extends Promise<DirectMessageEdge>,
    Fragmentable {
  node: <T = DirectMessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DirectMessageEdgeSubscription
  extends Promise<AsyncIterator<DirectMessageEdge>>,
    Fragmentable {
  node: <T = DirectMessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDirectMessage {
  count: Int;
}

export interface AggregateDirectMessagePromise
  extends Promise<AggregateDirectMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDirectMessageSubscription
  extends Promise<AsyncIterator<AggregateDirectMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GenreConnection {
  pageInfo: PageInfo;
  edges: GenreEdge[];
}

export interface GenreConnectionPromise
  extends Promise<GenreConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GenreEdge>>() => T;
  aggregate: <T = AggregateGenrePromise>() => T;
}

export interface GenreConnectionSubscription
  extends Promise<AsyncIterator<GenreConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GenreEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGenreSubscription>() => T;
}

export interface GenreEdge {
  node: Genre;
  cursor: String;
}

export interface GenreEdgePromise extends Promise<GenreEdge>, Fragmentable {
  node: <T = GenrePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GenreEdgeSubscription
  extends Promise<AsyncIterator<GenreEdge>>,
    Fragmentable {
  node: <T = GenreSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGenre {
  count: Int;
}

export interface AggregateGenrePromise
  extends Promise<AggregateGenre>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGenreSubscription
  extends Promise<AsyncIterator<AggregateGenre>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProfilePicConnection {
  pageInfo: PageInfo;
  edges: ProfilePicEdge[];
}

export interface ProfilePicConnectionPromise
  extends Promise<ProfilePicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfilePicEdge>>() => T;
  aggregate: <T = AggregateProfilePicPromise>() => T;
}

export interface ProfilePicConnectionSubscription
  extends Promise<AsyncIterator<ProfilePicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfilePicEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfilePicSubscription>() => T;
}

export interface ProfilePicEdge {
  node: ProfilePic;
  cursor: String;
}

export interface ProfilePicEdgePromise
  extends Promise<ProfilePicEdge>,
    Fragmentable {
  node: <T = ProfilePicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfilePicEdgeSubscription
  extends Promise<AsyncIterator<ProfilePicEdge>>,
    Fragmentable {
  node: <T = ProfilePicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProfilePic {
  count: Int;
}

export interface AggregateProfilePicPromise
  extends Promise<AggregateProfilePic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfilePicSubscription
  extends Promise<AsyncIterator<AggregateProfilePic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChatSubscriptionPayload {
  mutation: MutationType;
  node: Chat;
  updatedFields: String[];
  previousValues: ChatPreviousValues;
}

export interface ChatSubscriptionPayloadPromise
  extends Promise<ChatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChatPreviousValuesPromise>() => T;
}

export interface ChatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChatPreviousValuesSubscription>() => T;
}

export interface ChatPreviousValues {
  id: ID_Output;
}

export interface ChatPreviousValuesPromise
  extends Promise<ChatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface ChatPreviousValuesSubscription
  extends Promise<AsyncIterator<ChatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface DirectMessageSubscriptionPayload {
  mutation: MutationType;
  node: DirectMessage;
  updatedFields: String[];
  previousValues: DirectMessagePreviousValues;
}

export interface DirectMessageSubscriptionPayloadPromise
  extends Promise<DirectMessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DirectMessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DirectMessagePreviousValuesPromise>() => T;
}

export interface DirectMessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DirectMessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DirectMessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DirectMessagePreviousValuesSubscription>() => T;
}

export interface DirectMessagePreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  seen?: Boolean;
  updatedAt: DateTimeOutput;
}

export interface DirectMessagePreviousValuesPromise
  extends Promise<DirectMessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  seen: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DirectMessagePreviousValuesSubscription
  extends Promise<AsyncIterator<DirectMessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  seen: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  tmID: String;
  title: String;
  venue: String;
  image_url: String;
  times: String[];
  city: String;
  genre: String;
  category: String;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tmID: () => Promise<String>;
  title: () => Promise<String>;
  venue: () => Promise<String>;
  image_url: () => Promise<String>;
  times: () => Promise<String[]>;
  city: () => Promise<String>;
  genre: () => Promise<String>;
  category: () => Promise<String>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tmID: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  venue: () => Promise<AsyncIterator<String>>;
  image_url: () => Promise<AsyncIterator<String>>;
  times: () => Promise<AsyncIterator<String[]>>;
  city: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
}

export interface GenreSubscriptionPayload {
  mutation: MutationType;
  node: Genre;
  updatedFields: String[];
  previousValues: GenrePreviousValues;
}

export interface GenreSubscriptionPayloadPromise
  extends Promise<GenreSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GenrePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GenrePreviousValuesPromise>() => T;
}

export interface GenreSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GenreSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GenreSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GenrePreviousValuesSubscription>() => T;
}

export interface GenrePreviousValues {
  id: ID_Output;
  tmID: String;
  category: Category;
  name: String;
}

export interface GenrePreviousValuesPromise
  extends Promise<GenrePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tmID: () => Promise<String>;
  category: () => Promise<Category>;
  name: () => Promise<String>;
}

export interface GenrePreviousValuesSubscription
  extends Promise<AsyncIterator<GenrePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tmID: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<Category>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ProfilePicSubscriptionPayload {
  mutation: MutationType;
  node: ProfilePic;
  updatedFields: String[];
  previousValues: ProfilePicPreviousValues;
}

export interface ProfilePicSubscriptionPayloadPromise
  extends Promise<ProfilePicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePicPreviousValuesPromise>() => T;
}

export interface ProfilePicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfilePicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfilePicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePicPreviousValuesSubscription>() => T;
}

export interface ProfilePicPreviousValues {
  id: ID_Output;
  img_url: String;
  default: Boolean;
}

export interface ProfilePicPreviousValuesPromise
  extends Promise<ProfilePicPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  img_url: () => Promise<String>;
  default: () => Promise<Boolean>;
}

export interface ProfilePicPreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  img_url: () => Promise<AsyncIterator<String>>;
  default: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  password: String;
  gender?: Gender;
  dob?: String;
  location?: String;
  email: String;
  phone?: String;
  biography?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  genderPrefs: GenderPrefs[];
  minAgePref?: Int;
  maxAgePref?: Int;
  permissions: Permission;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  verified?: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  gender: () => Promise<Gender>;
  dob: () => Promise<String>;
  location: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  biography: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  genderPrefs: () => Promise<GenderPrefs[]>;
  minAgePref: () => Promise<Int>;
  maxAgePref: () => Promise<Int>;
  permissions: () => Promise<Permission>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  stripeCustomerId: () => Promise<String>;
  stripeSubscriptionId: () => Promise<String>;
  verified: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  dob: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  biography: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  genderPrefs: () => Promise<AsyncIterator<GenderPrefs[]>>;
  minAgePref: () => Promise<AsyncIterator<Int>>;
  maxAgePref: () => Promise<AsyncIterator<Int>>;
  permissions: () => Promise<AsyncIterator<Permission>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  stripeCustomerId: () => Promise<AsyncIterator<String>>;
  stripeSubscriptionId: () => Promise<AsyncIterator<String>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "GenderPrefs",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Chat",
    embedded: false
  },
  {
    name: "DirectMessage",
    embedded: false
  },
  {
    name: "ProfilePic",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Genre",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
